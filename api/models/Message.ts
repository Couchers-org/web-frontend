/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MessageHostRequestStatusTarget,
    MessageHostRequestStatusTargetFromJSON,
    MessageHostRequestStatusTargetFromJSONTyped,
    MessageHostRequestStatusTargetToJSON,
} from './MessageHostRequestStatusTarget';
import {
    MessageMessageType,
    MessageMessageTypeFromJSON,
    MessageMessageTypeFromJSONTyped,
    MessageMessageTypeToJSON,
} from './MessageMessageType';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    readonly user: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    readonly toUser: number | null;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    readonly conversation: number;
    /**
     * 
     * @type {MessageMessageType}
     * @memberof Message
     */
    messageType: MessageMessageType | null;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    readonly text: string | null;
    /**
     * 
     * @type {MessageHostRequestStatusTarget}
     * @memberof Message
     */
    hostRequestStatusTarget: MessageHostRequestStatusTarget | null;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': json['user'],
        'toUser': json['to_user'],
        'conversation': json['conversation'],
        'messageType': MessageMessageTypeFromJSON(json['message_type']),
        'createdAt': (new Date(json['created_at'])),
        'text': json['text'],
        'hostRequestStatusTarget': MessageHostRequestStatusTargetFromJSON(json['host_request_status_target']),
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message_type': MessageMessageTypeToJSON(value.messageType),
        'host_request_status_target': MessageHostRequestStatusTargetToJSON(value.hostRequestStatusTarget),
    };
}

