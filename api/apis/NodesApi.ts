/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Node,
    NodeFromJSON,
    NodeToJSON,
    PaginatedNodeList,
    PaginatedNodeListFromJSON,
    PaginatedNodeListToJSON,
    PatchedNode,
    PatchedNodeFromJSON,
    PatchedNodeToJSON,
} from '../models';

export interface NodesCreateRequest {
    node: Node;
}

export interface NodesDestroyRequest {
    id: number;
}

export interface NodesListRequest {
    page?: number;
}

export interface NodesPartialUpdateRequest {
    id: number;
    patchedNode?: PatchedNode;
}

export interface NodesRetrieveRequest {
    id: number;
}

export interface NodesUpdateRequest {
    id: number;
    node: Node;
}

/**
 * 
 */
export class NodesApi extends runtime.BaseAPI {

    /**
     */
    async nodesCreateRaw(requestParameters: NodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Node>> {
        if (requestParameters.node === null || requestParameters.node === undefined) {
            throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling nodesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/nodes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NodeToJSON(requestParameters.node),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeFromJSON(jsonValue));
    }

    /**
     */
    async nodesCreate(requestParameters: NodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Node> {
        const response = await this.nodesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodesDestroyRaw(requestParameters: NodesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nodesDestroy(requestParameters: NodesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.nodesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nodesListRaw(requestParameters: NodesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedNodeList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nodes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNodeListFromJSON(jsonValue));
    }

    /**
     */
    async nodesList(requestParameters: NodesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedNodeList> {
        const response = await this.nodesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodesPartialUpdateRaw(requestParameters: NodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Node>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNodeToJSON(requestParameters.patchedNode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeFromJSON(jsonValue));
    }

    /**
     */
    async nodesPartialUpdate(requestParameters: NodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Node> {
        const response = await this.nodesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodesRetrieveRaw(requestParameters: NodesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Node>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeFromJSON(jsonValue));
    }

    /**
     */
    async nodesRetrieve(requestParameters: NodesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Node> {
        const response = await this.nodesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodesUpdateRaw(requestParameters: NodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Node>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodesUpdate.');
        }

        if (requestParameters.node === null || requestParameters.node === undefined) {
            throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling nodesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NodeToJSON(requestParameters.node),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeFromJSON(jsonValue));
    }

    /**
     */
    async nodesUpdate(requestParameters: NodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Node> {
        const response = await this.nodesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
