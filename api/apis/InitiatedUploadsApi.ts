/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InitiatedUpload,
    InitiatedUploadFromJSON,
    InitiatedUploadToJSON,
    PaginatedInitiatedUploadList,
    PaginatedInitiatedUploadListFromJSON,
    PaginatedInitiatedUploadListToJSON,
    PatchedInitiatedUpload,
    PatchedInitiatedUploadFromJSON,
    PatchedInitiatedUploadToJSON,
} from '../models';

export interface InitiatedUploadsCreateRequest {
    initiatedUpload?: InitiatedUpload;
}

export interface InitiatedUploadsDestroyRequest {
    id: number;
}

export interface InitiatedUploadsListRequest {
    page?: number;
}

export interface InitiatedUploadsPartialUpdateRequest {
    id: number;
    patchedInitiatedUpload?: PatchedInitiatedUpload;
}

export interface InitiatedUploadsRetrieveRequest {
    id: number;
}

export interface InitiatedUploadsUpdateRequest {
    id: number;
    initiatedUpload?: InitiatedUpload;
}

/**
 * 
 */
export class InitiatedUploadsApi extends runtime.BaseAPI {

    /**
     */
    async initiatedUploadsCreateRaw(requestParameters: InitiatedUploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InitiatedUpload>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiatedUploadToJSON(requestParameters.initiatedUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiatedUploadFromJSON(jsonValue));
    }

    /**
     */
    async initiatedUploadsCreate(requestParameters: InitiatedUploadsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InitiatedUpload> {
        const response = await this.initiatedUploadsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async initiatedUploadsDestroyRaw(requestParameters: InitiatedUploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling initiatedUploadsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async initiatedUploadsDestroy(requestParameters: InitiatedUploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.initiatedUploadsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async initiatedUploadsListRaw(requestParameters: InitiatedUploadsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedInitiatedUploadList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInitiatedUploadListFromJSON(jsonValue));
    }

    /**
     */
    async initiatedUploadsList(requestParameters: InitiatedUploadsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedInitiatedUploadList> {
        const response = await this.initiatedUploadsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async initiatedUploadsPartialUpdateRaw(requestParameters: InitiatedUploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InitiatedUpload>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling initiatedUploadsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInitiatedUploadToJSON(requestParameters.patchedInitiatedUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiatedUploadFromJSON(jsonValue));
    }

    /**
     */
    async initiatedUploadsPartialUpdate(requestParameters: InitiatedUploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InitiatedUpload> {
        const response = await this.initiatedUploadsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async initiatedUploadsRetrieveRaw(requestParameters: InitiatedUploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InitiatedUpload>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling initiatedUploadsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiatedUploadFromJSON(jsonValue));
    }

    /**
     */
    async initiatedUploadsRetrieve(requestParameters: InitiatedUploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InitiatedUpload> {
        const response = await this.initiatedUploadsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async initiatedUploadsUpdateRaw(requestParameters: InitiatedUploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InitiatedUpload>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling initiatedUploadsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/initiated_uploads/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InitiatedUploadToJSON(requestParameters.initiatedUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiatedUploadFromJSON(jsonValue));
    }

    /**
     */
    async initiatedUploadsUpdate(requestParameters: InitiatedUploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InitiatedUpload> {
        const response = await this.initiatedUploadsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
