/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventOccurrence,
    EventOccurrenceFromJSON,
    EventOccurrenceToJSON,
    PaginatedEventOccurrenceList,
    PaginatedEventOccurrenceListFromJSON,
    PaginatedEventOccurrenceListToJSON,
    PatchedEventOccurrence,
    PatchedEventOccurrenceFromJSON,
    PatchedEventOccurrenceToJSON,
} from '../models';

export interface EventOccurrencesCreateRequest {
    eventOccurrence?: EventOccurrence;
}

export interface EventOccurrencesDestroyRequest {
    id: number;
}

export interface EventOccurrencesListRequest {
    page?: number;
}

export interface EventOccurrencesPartialUpdateRequest {
    id: number;
    patchedEventOccurrence?: PatchedEventOccurrence;
}

export interface EventOccurrencesRetrieveRequest {
    id: number;
}

export interface EventOccurrencesUpdateRequest {
    id: number;
    eventOccurrence?: EventOccurrence;
}

/**
 * 
 */
export class EventOccurrencesApi extends runtime.BaseAPI {

    /**
     */
    async eventOccurrencesCreateRaw(requestParameters: EventOccurrencesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrence>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventOccurrenceToJSON(requestParameters.eventOccurrence),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrencesCreate(requestParameters: EventOccurrencesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrence> {
        const response = await this.eventOccurrencesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrencesDestroyRaw(requestParameters: EventOccurrencesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrencesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async eventOccurrencesDestroy(requestParameters: EventOccurrencesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.eventOccurrencesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async eventOccurrencesListRaw(requestParameters: EventOccurrencesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedEventOccurrenceList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventOccurrenceListFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrencesList(requestParameters: EventOccurrencesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedEventOccurrenceList> {
        const response = await this.eventOccurrencesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrencesPartialUpdateRaw(requestParameters: EventOccurrencesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrence>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrencesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEventOccurrenceToJSON(requestParameters.patchedEventOccurrence),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrencesPartialUpdate(requestParameters: EventOccurrencesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrence> {
        const response = await this.eventOccurrencesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrencesRetrieveRaw(requestParameters: EventOccurrencesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrence>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrencesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrencesRetrieve(requestParameters: EventOccurrencesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrence> {
        const response = await this.eventOccurrencesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrencesUpdateRaw(requestParameters: EventOccurrencesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrence>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrencesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventOccurrenceToJSON(requestParameters.eventOccurrence),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrencesUpdate(requestParameters: EventOccurrencesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrence> {
        const response = await this.eventOccurrencesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
