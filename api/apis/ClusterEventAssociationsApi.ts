/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClusterEventAssociation,
    ClusterEventAssociationFromJSON,
    ClusterEventAssociationToJSON,
    PaginatedClusterEventAssociationList,
    PaginatedClusterEventAssociationListFromJSON,
    PaginatedClusterEventAssociationListToJSON,
    PatchedClusterEventAssociation,
    PatchedClusterEventAssociationFromJSON,
    PatchedClusterEventAssociationToJSON,
} from '../models';

export interface ClusterEventAssociationsCreateRequest {
    clusterEventAssociation?: ClusterEventAssociation;
}

export interface ClusterEventAssociationsDestroyRequest {
    id: number;
}

export interface ClusterEventAssociationsListRequest {
    page?: number;
}

export interface ClusterEventAssociationsPartialUpdateRequest {
    id: number;
    patchedClusterEventAssociation?: PatchedClusterEventAssociation;
}

export interface ClusterEventAssociationsRetrieveRequest {
    id: number;
}

export interface ClusterEventAssociationsUpdateRequest {
    id: number;
    clusterEventAssociation?: ClusterEventAssociation;
}

/**
 * 
 */
export class ClusterEventAssociationsApi extends runtime.BaseAPI {

    /**
     */
    async clusterEventAssociationsCreateRaw(requestParameters: ClusterEventAssociationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterEventAssociation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterEventAssociationToJSON(requestParameters.clusterEventAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterEventAssociationFromJSON(jsonValue));
    }

    /**
     */
    async clusterEventAssociationsCreate(requestParameters: ClusterEventAssociationsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterEventAssociation> {
        const response = await this.clusterEventAssociationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterEventAssociationsDestroyRaw(requestParameters: ClusterEventAssociationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterEventAssociationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterEventAssociationsDestroy(requestParameters: ClusterEventAssociationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.clusterEventAssociationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterEventAssociationsListRaw(requestParameters: ClusterEventAssociationsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedClusterEventAssociationList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedClusterEventAssociationListFromJSON(jsonValue));
    }

    /**
     */
    async clusterEventAssociationsList(requestParameters: ClusterEventAssociationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedClusterEventAssociationList> {
        const response = await this.clusterEventAssociationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterEventAssociationsPartialUpdateRaw(requestParameters: ClusterEventAssociationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterEventAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterEventAssociationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedClusterEventAssociationToJSON(requestParameters.patchedClusterEventAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterEventAssociationFromJSON(jsonValue));
    }

    /**
     */
    async clusterEventAssociationsPartialUpdate(requestParameters: ClusterEventAssociationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterEventAssociation> {
        const response = await this.clusterEventAssociationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterEventAssociationsRetrieveRaw(requestParameters: ClusterEventAssociationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterEventAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterEventAssociationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterEventAssociationFromJSON(jsonValue));
    }

    /**
     */
    async clusterEventAssociationsRetrieve(requestParameters: ClusterEventAssociationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterEventAssociation> {
        const response = await this.clusterEventAssociationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterEventAssociationsUpdateRaw(requestParameters: ClusterEventAssociationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterEventAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterEventAssociationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_event_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterEventAssociationToJSON(requestParameters.clusterEventAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterEventAssociationFromJSON(jsonValue));
    }

    /**
     */
    async clusterEventAssociationsUpdate(requestParameters: ClusterEventAssociationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterEventAssociation> {
        const response = await this.clusterEventAssociationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
