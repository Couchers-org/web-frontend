/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Discussion,
    DiscussionFromJSON,
    DiscussionToJSON,
    PaginatedDiscussionList,
    PaginatedDiscussionListFromJSON,
    PaginatedDiscussionListToJSON,
    PatchedDiscussion,
    PatchedDiscussionFromJSON,
    PatchedDiscussionToJSON,
} from '../models';

export interface DiscussionsCreateRequest {
    discussion: Discussion;
}

export interface DiscussionsDestroyRequest {
    id: number;
}

export interface DiscussionsListRequest {
    page?: number;
}

export interface DiscussionsPartialUpdateRequest {
    id: number;
    patchedDiscussion?: PatchedDiscussion;
}

export interface DiscussionsRetrieveRequest {
    id: number;
}

export interface DiscussionsUpdateRequest {
    id: number;
    discussion: Discussion;
}

/**
 * 
 */
export class DiscussionsApi extends runtime.BaseAPI {

    /**
     */
    async discussionsCreateRaw(requestParameters: DiscussionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Discussion>> {
        if (requestParameters.discussion === null || requestParameters.discussion === undefined) {
            throw new runtime.RequiredError('discussion','Required parameter requestParameters.discussion was null or undefined when calling discussionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscussionToJSON(requestParameters.discussion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionFromJSON(jsonValue));
    }

    /**
     */
    async discussionsCreate(requestParameters: DiscussionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Discussion> {
        const response = await this.discussionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionsDestroyRaw(requestParameters: DiscussionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async discussionsDestroy(requestParameters: DiscussionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.discussionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discussionsListRaw(requestParameters: DiscussionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedDiscussionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDiscussionListFromJSON(jsonValue));
    }

    /**
     */
    async discussionsList(requestParameters: DiscussionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedDiscussionList> {
        const response = await this.discussionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionsPartialUpdateRaw(requestParameters: DiscussionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Discussion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDiscussionToJSON(requestParameters.patchedDiscussion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionFromJSON(jsonValue));
    }

    /**
     */
    async discussionsPartialUpdate(requestParameters: DiscussionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Discussion> {
        const response = await this.discussionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionsRetrieveRaw(requestParameters: DiscussionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Discussion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionFromJSON(jsonValue));
    }

    /**
     */
    async discussionsRetrieve(requestParameters: DiscussionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Discussion> {
        const response = await this.discussionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionsUpdateRaw(requestParameters: DiscussionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Discussion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionsUpdate.');
        }

        if (requestParameters.discussion === null || requestParameters.discussion === undefined) {
            throw new runtime.RequiredError('discussion','Required parameter requestParameters.discussion was null or undefined when calling discussionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DiscussionToJSON(requestParameters.discussion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionFromJSON(jsonValue));
    }

    /**
     */
    async discussionsUpdate(requestParameters: DiscussionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Discussion> {
        const response = await this.discussionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
