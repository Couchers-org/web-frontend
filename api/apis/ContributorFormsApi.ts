/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContributorForm,
    ContributorFormFromJSON,
    ContributorFormToJSON,
    PaginatedContributorFormList,
    PaginatedContributorFormListFromJSON,
    PaginatedContributorFormListToJSON,
    PatchedContributorForm,
    PatchedContributorFormFromJSON,
    PatchedContributorFormToJSON,
} from '../models';

export interface ContributorFormsCreateRequest {
    contributorForm?: ContributorForm;
}

export interface ContributorFormsDestroyRequest {
    id: number;
}

export interface ContributorFormsListRequest {
    page?: number;
}

export interface ContributorFormsPartialUpdateRequest {
    id: number;
    patchedContributorForm?: PatchedContributorForm;
}

export interface ContributorFormsRetrieveRequest {
    id: number;
}

export interface ContributorFormsUpdateRequest {
    id: number;
    contributorForm?: ContributorForm;
}

/**
 * 
 */
export class ContributorFormsApi extends runtime.BaseAPI {

    /**
     */
    async contributorFormsCreateRaw(requestParameters: ContributorFormsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContributorForm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContributorFormToJSON(requestParameters.contributorForm),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorFormFromJSON(jsonValue));
    }

    /**
     */
    async contributorFormsCreate(requestParameters: ContributorFormsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContributorForm> {
        const response = await this.contributorFormsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorFormsDestroyRaw(requestParameters: ContributorFormsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorFormsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contributorFormsDestroy(requestParameters: ContributorFormsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.contributorFormsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contributorFormsListRaw(requestParameters: ContributorFormsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedContributorFormList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContributorFormListFromJSON(jsonValue));
    }

    /**
     */
    async contributorFormsList(requestParameters: ContributorFormsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedContributorFormList> {
        const response = await this.contributorFormsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorFormsPartialUpdateRaw(requestParameters: ContributorFormsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContributorForm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorFormsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContributorFormToJSON(requestParameters.patchedContributorForm),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorFormFromJSON(jsonValue));
    }

    /**
     */
    async contributorFormsPartialUpdate(requestParameters: ContributorFormsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContributorForm> {
        const response = await this.contributorFormsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorFormsRetrieveRaw(requestParameters: ContributorFormsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContributorForm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorFormsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorFormFromJSON(jsonValue));
    }

    /**
     */
    async contributorFormsRetrieve(requestParameters: ContributorFormsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContributorForm> {
        const response = await this.contributorFormsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorFormsUpdateRaw(requestParameters: ContributorFormsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContributorForm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorFormsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/contributor_forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContributorFormToJSON(requestParameters.contributorForm),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorFormFromJSON(jsonValue));
    }

    /**
     */
    async contributorFormsUpdate(requestParameters: ContributorFormsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContributorForm> {
        const response = await this.contributorFormsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
