/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NodeClusterAssociation,
    NodeClusterAssociationFromJSON,
    NodeClusterAssociationToJSON,
    PaginatedNodeClusterAssociationList,
    PaginatedNodeClusterAssociationListFromJSON,
    PaginatedNodeClusterAssociationListToJSON,
    PatchedNodeClusterAssociation,
    PatchedNodeClusterAssociationFromJSON,
    PatchedNodeClusterAssociationToJSON,
} from '../models';

export interface NodeClusterAssociationsCreateRequest {
    nodeClusterAssociation?: NodeClusterAssociation;
}

export interface NodeClusterAssociationsDestroyRequest {
    id: number;
}

export interface NodeClusterAssociationsListRequest {
    page?: number;
}

export interface NodeClusterAssociationsPartialUpdateRequest {
    id: number;
    patchedNodeClusterAssociation?: PatchedNodeClusterAssociation;
}

export interface NodeClusterAssociationsRetrieveRequest {
    id: number;
}

export interface NodeClusterAssociationsUpdateRequest {
    id: number;
    nodeClusterAssociation?: NodeClusterAssociation;
}

/**
 * 
 */
export class NodeClusterAssociationsApi extends runtime.BaseAPI {

    /**
     */
    async nodeClusterAssociationsCreateRaw(requestParameters: NodeClusterAssociationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeClusterAssociation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NodeClusterAssociationToJSON(requestParameters.nodeClusterAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeClusterAssociationFromJSON(jsonValue));
    }

    /**
     */
    async nodeClusterAssociationsCreate(requestParameters: NodeClusterAssociationsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeClusterAssociation> {
        const response = await this.nodeClusterAssociationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodeClusterAssociationsDestroyRaw(requestParameters: NodeClusterAssociationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodeClusterAssociationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nodeClusterAssociationsDestroy(requestParameters: NodeClusterAssociationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.nodeClusterAssociationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nodeClusterAssociationsListRaw(requestParameters: NodeClusterAssociationsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedNodeClusterAssociationList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNodeClusterAssociationListFromJSON(jsonValue));
    }

    /**
     */
    async nodeClusterAssociationsList(requestParameters: NodeClusterAssociationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedNodeClusterAssociationList> {
        const response = await this.nodeClusterAssociationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodeClusterAssociationsPartialUpdateRaw(requestParameters: NodeClusterAssociationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeClusterAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodeClusterAssociationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNodeClusterAssociationToJSON(requestParameters.patchedNodeClusterAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeClusterAssociationFromJSON(jsonValue));
    }

    /**
     */
    async nodeClusterAssociationsPartialUpdate(requestParameters: NodeClusterAssociationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeClusterAssociation> {
        const response = await this.nodeClusterAssociationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodeClusterAssociationsRetrieveRaw(requestParameters: NodeClusterAssociationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeClusterAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodeClusterAssociationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeClusterAssociationFromJSON(jsonValue));
    }

    /**
     */
    async nodeClusterAssociationsRetrieve(requestParameters: NodeClusterAssociationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeClusterAssociation> {
        const response = await this.nodeClusterAssociationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodeClusterAssociationsUpdateRaw(requestParameters: NodeClusterAssociationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeClusterAssociation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nodeClusterAssociationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/node_cluster_associations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NodeClusterAssociationToJSON(requestParameters.nodeClusterAssociation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeClusterAssociationFromJSON(jsonValue));
    }

    /**
     */
    async nodeClusterAssociationsUpdate(requestParameters: NodeClusterAssociationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeClusterAssociation> {
        const response = await this.nodeClusterAssociationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
