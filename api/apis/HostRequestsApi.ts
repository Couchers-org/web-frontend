/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HostRequest,
    HostRequestFromJSON,
    HostRequestToJSON,
    PaginatedHostRequestList,
    PaginatedHostRequestListFromJSON,
    PaginatedHostRequestListToJSON,
    PatchedHostRequest,
    PatchedHostRequestFromJSON,
    PatchedHostRequestToJSON,
} from '../models';

export interface HostRequestsCreateRequest {
    hostRequest: HostRequest;
}

export interface HostRequestsDestroyRequest {
    id: number;
}

export interface HostRequestsListRequest {
    page?: number;
}

export interface HostRequestsPartialUpdateRequest {
    id: number;
    patchedHostRequest?: PatchedHostRequest;
}

export interface HostRequestsRetrieveRequest {
    id: number;
}

export interface HostRequestsUpdateRequest {
    id: number;
    hostRequest: HostRequest;
}

/**
 * 
 */
export class HostRequestsApi extends runtime.BaseAPI {

    /**
     */
    async hostRequestsCreateRaw(requestParameters: HostRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HostRequest>> {
        if (requestParameters.hostRequest === null || requestParameters.hostRequest === undefined) {
            throw new runtime.RequiredError('hostRequest','Required parameter requestParameters.hostRequest was null or undefined when calling hostRequestsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HostRequestToJSON(requestParameters.hostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostRequestFromJSON(jsonValue));
    }

    /**
     */
    async hostRequestsCreate(requestParameters: HostRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HostRequest> {
        const response = await this.hostRequestsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hostRequestsDestroyRaw(requestParameters: HostRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hostRequestsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hostRequestsDestroy(requestParameters: HostRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.hostRequestsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hostRequestsListRaw(requestParameters: HostRequestsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedHostRequestList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedHostRequestListFromJSON(jsonValue));
    }

    /**
     */
    async hostRequestsList(requestParameters: HostRequestsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedHostRequestList> {
        const response = await this.hostRequestsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hostRequestsPartialUpdateRaw(requestParameters: HostRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HostRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hostRequestsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedHostRequestToJSON(requestParameters.patchedHostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostRequestFromJSON(jsonValue));
    }

    /**
     */
    async hostRequestsPartialUpdate(requestParameters: HostRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HostRequest> {
        const response = await this.hostRequestsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hostRequestsRetrieveRaw(requestParameters: HostRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HostRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hostRequestsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostRequestFromJSON(jsonValue));
    }

    /**
     */
    async hostRequestsRetrieve(requestParameters: HostRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HostRequest> {
        const response = await this.hostRequestsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hostRequestsUpdateRaw(requestParameters: HostRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HostRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hostRequestsUpdate.');
        }

        if (requestParameters.hostRequest === null || requestParameters.hostRequest === undefined) {
            throw new runtime.RequiredError('hostRequest','Required parameter requestParameters.hostRequest was null or undefined when calling hostRequestsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/host_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HostRequestToJSON(requestParameters.hostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostRequestFromJSON(jsonValue));
    }

    /**
     */
    async hostRequestsUpdate(requestParameters: HostRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HostRequest> {
        const response = await this.hostRequestsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
