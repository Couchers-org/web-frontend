/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotificationDelivery,
    NotificationDeliveryFromJSON,
    NotificationDeliveryToJSON,
    PaginatedNotificationDeliveryList,
    PaginatedNotificationDeliveryListFromJSON,
    PaginatedNotificationDeliveryListToJSON,
    PatchedNotificationDelivery,
    PatchedNotificationDeliveryFromJSON,
    PatchedNotificationDeliveryToJSON,
} from '../models';

export interface NotificationDeliveriesCreateRequest {
    notificationDelivery?: NotificationDelivery;
}

export interface NotificationDeliveriesDestroyRequest {
    id: number;
}

export interface NotificationDeliveriesListRequest {
    page?: number;
}

export interface NotificationDeliveriesPartialUpdateRequest {
    id: number;
    patchedNotificationDelivery?: PatchedNotificationDelivery;
}

export interface NotificationDeliveriesRetrieveRequest {
    id: number;
}

export interface NotificationDeliveriesUpdateRequest {
    id: number;
    notificationDelivery?: NotificationDelivery;
}

/**
 * 
 */
export class NotificationDeliveriesApi extends runtime.BaseAPI {

    /**
     */
    async notificationDeliveriesCreateRaw(requestParameters: NotificationDeliveriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationDelivery>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationDeliveryToJSON(requestParameters.notificationDelivery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDeliveryFromJSON(jsonValue));
    }

    /**
     */
    async notificationDeliveriesCreate(requestParameters: NotificationDeliveriesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationDelivery> {
        const response = await this.notificationDeliveriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationDeliveriesDestroyRaw(requestParameters: NotificationDeliveriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationDeliveriesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationDeliveriesDestroy(requestParameters: NotificationDeliveriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.notificationDeliveriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationDeliveriesListRaw(requestParameters: NotificationDeliveriesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedNotificationDeliveryList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationDeliveryListFromJSON(jsonValue));
    }

    /**
     */
    async notificationDeliveriesList(requestParameters: NotificationDeliveriesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedNotificationDeliveryList> {
        const response = await this.notificationDeliveriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationDeliveriesPartialUpdateRaw(requestParameters: NotificationDeliveriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationDelivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationDeliveriesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNotificationDeliveryToJSON(requestParameters.patchedNotificationDelivery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDeliveryFromJSON(jsonValue));
    }

    /**
     */
    async notificationDeliveriesPartialUpdate(requestParameters: NotificationDeliveriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationDelivery> {
        const response = await this.notificationDeliveriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationDeliveriesRetrieveRaw(requestParameters: NotificationDeliveriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationDelivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationDeliveriesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDeliveryFromJSON(jsonValue));
    }

    /**
     */
    async notificationDeliveriesRetrieve(requestParameters: NotificationDeliveriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationDelivery> {
        const response = await this.notificationDeliveriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationDeliveriesUpdateRaw(requestParameters: NotificationDeliveriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationDelivery>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationDeliveriesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_deliveries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationDeliveryToJSON(requestParameters.notificationDelivery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDeliveryFromJSON(jsonValue));
    }

    /**
     */
    async notificationDeliveriesUpdate(requestParameters: NotificationDeliveriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationDelivery> {
        const response = await this.notificationDeliveriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
