/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LanguageAbility,
    LanguageAbilityFromJSON,
    LanguageAbilityToJSON,
    PaginatedLanguageAbilityList,
    PaginatedLanguageAbilityListFromJSON,
    PaginatedLanguageAbilityListToJSON,
    PaginatedRegionLivedList,
    PaginatedRegionLivedListFromJSON,
    PaginatedRegionLivedListToJSON,
    PaginatedRegionVisitedList,
    PaginatedRegionVisitedListFromJSON,
    PaginatedRegionVisitedListToJSON,
    PaginatedUserBlockList,
    PaginatedUserBlockListFromJSON,
    PaginatedUserBlockListToJSON,
    PaginatedUserList,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedLanguageAbility,
    PatchedLanguageAbilityFromJSON,
    PatchedLanguageAbilityToJSON,
    PatchedRegionLived,
    PatchedRegionLivedFromJSON,
    PatchedRegionLivedToJSON,
    PatchedRegionVisited,
    PatchedRegionVisitedFromJSON,
    PatchedRegionVisitedToJSON,
    PatchedUser,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    PatchedUserBlock,
    PatchedUserBlockFromJSON,
    PatchedUserBlockToJSON,
    RegionLived,
    RegionLivedFromJSON,
    RegionLivedToJSON,
    RegionVisited,
    RegionVisitedFromJSON,
    RegionVisitedToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserBlock,
    UserBlockFromJSON,
    UserBlockToJSON,
} from '../models';

export interface UsersActivationCreateRequest {
    user?: User;
}

export interface UsersCreateRequest {
    user?: User;
}

export interface UsersDestroyRequest {
    id: number;
}

export interface UsersLanguagesCreateRequest {
    userId: string;
    languageAbility?: LanguageAbility;
}

export interface UsersLanguagesDestroyRequest {
    id: number;
    userId: string;
}

export interface UsersLanguagesListRequest {
    userId: string;
    page?: number;
}

export interface UsersLanguagesPartialUpdateRequest {
    id: number;
    userId: string;
    patchedLanguageAbility?: PatchedLanguageAbility;
}

export interface UsersLanguagesRetrieveRequest {
    id: number;
    userId: string;
}

export interface UsersLanguagesUpdateRequest {
    id: number;
    userId: string;
    languageAbility?: LanguageAbility;
}

export interface UsersListRequest {
    page?: number;
}

export interface UsersMePartialUpdateRequest {
    patchedUser?: PatchedUser;
}

export interface UsersMeUpdateRequest {
    user?: User;
}

export interface UsersPartialUpdateRequest {
    id: number;
    patchedUser?: PatchedUser;
}

export interface UsersRegionsLivedCreateRequest {
    userId: string;
    regionLived?: RegionLived;
}

export interface UsersRegionsLivedDestroyRequest {
    id: number;
    userId: string;
}

export interface UsersRegionsLivedListRequest {
    userId: string;
    page?: number;
}

export interface UsersRegionsLivedPartialUpdateRequest {
    id: number;
    userId: string;
    patchedRegionLived?: PatchedRegionLived;
}

export interface UsersRegionsLivedRetrieveRequest {
    id: number;
    userId: string;
}

export interface UsersRegionsLivedUpdateRequest {
    id: number;
    userId: string;
    regionLived?: RegionLived;
}

export interface UsersRegionsVisitedCreateRequest {
    userId: string;
    regionVisited: RegionVisited;
}

export interface UsersRegionsVisitedDestroyRequest {
    id: number;
    userId: string;
}

export interface UsersRegionsVisitedListRequest {
    userId: string;
    page?: number;
}

export interface UsersRegionsVisitedPartialUpdateRequest {
    id: number;
    userId: string;
    patchedRegionVisited?: PatchedRegionVisited;
}

export interface UsersRegionsVisitedRetrieveRequest {
    id: number;
    userId: string;
}

export interface UsersRegionsVisitedUpdateRequest {
    id: number;
    userId: string;
    regionVisited: RegionVisited;
}

export interface UsersResendActivationCreateRequest {
    user?: User;
}

export interface UsersResetPasswordConfirmCreateRequest {
    user?: User;
}

export interface UsersResetPasswordCreateRequest {
    user?: User;
}

export interface UsersResetUsernameConfirmCreateRequest {
    user?: User;
}

export interface UsersResetUsernameCreateRequest {
    user?: User;
}

export interface UsersRetrieveRequest {
    id: number;
}

export interface UsersSetPasswordCreateRequest {
    user?: User;
}

export interface UsersSetUsernameCreateRequest {
    user?: User;
}

export interface UsersUpdateRequest {
    id: number;
    user?: User;
}

export interface UsersUserBlocksCreateRequest {
    userId: string;
    userBlock: UserBlock;
}

export interface UsersUserBlocksDestroyRequest {
    id: number;
    userId: string;
}

export interface UsersUserBlocksListRequest {
    userId: string;
    page?: number;
}

export interface UsersUserBlocksPartialUpdateRequest {
    id: number;
    userId: string;
    patchedUserBlock?: PatchedUserBlock;
}

export interface UsersUserBlocksRetrieveRequest {
    id: number;
    userId: string;
}

export interface UsersUserBlocksUpdateRequest {
    id: number;
    userId: string;
    userBlock: UserBlock;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersActivationCreateRaw(requestParameters: UsersActivationCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/activation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersActivationCreate(requestParameters: UsersActivationCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersActivationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersCreateRaw(requestParameters: UsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersCreate(requestParameters: UsersCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersDestroyRaw(requestParameters: UsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersDestroy(requestParameters: UsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersLanguagesCreateRaw(requestParameters: UsersLanguagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LanguageAbility>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageAbilityToJSON(requestParameters.languageAbility),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageAbilityFromJSON(jsonValue));
    }

    /**
     */
    async usersLanguagesCreate(requestParameters: UsersLanguagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LanguageAbility> {
        const response = await this.usersLanguagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLanguagesDestroyRaw(requestParameters: UsersLanguagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersLanguagesDestroy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersLanguagesDestroy(requestParameters: UsersLanguagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersLanguagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersLanguagesListRaw(requestParameters: UsersLanguagesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedLanguageAbilityList>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLanguageAbilityListFromJSON(jsonValue));
    }

    /**
     */
    async usersLanguagesList(requestParameters: UsersLanguagesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedLanguageAbilityList> {
        const response = await this.usersLanguagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLanguagesPartialUpdateRaw(requestParameters: UsersLanguagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LanguageAbility>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersLanguagesPartialUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLanguageAbilityToJSON(requestParameters.patchedLanguageAbility),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageAbilityFromJSON(jsonValue));
    }

    /**
     */
    async usersLanguagesPartialUpdate(requestParameters: UsersLanguagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LanguageAbility> {
        const response = await this.usersLanguagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLanguagesRetrieveRaw(requestParameters: UsersLanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LanguageAbility>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersLanguagesRetrieve.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageAbilityFromJSON(jsonValue));
    }

    /**
     */
    async usersLanguagesRetrieve(requestParameters: UsersLanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LanguageAbility> {
        const response = await this.usersLanguagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLanguagesUpdateRaw(requestParameters: UsersLanguagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LanguageAbility>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersLanguagesUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersLanguagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageAbilityToJSON(requestParameters.languageAbility),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageAbilityFromJSON(jsonValue));
    }

    /**
     */
    async usersLanguagesUpdate(requestParameters: UsersLanguagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LanguageAbility> {
        const response = await this.usersLanguagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersListRaw(requestParameters: UsersListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     */
    async usersList(requestParameters: UsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedUserList> {
        const response = await this.usersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersMeDestroyRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/me/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersMeDestroy(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersMeDestroyRaw(initOverrides);
    }

    /**
     */
    async usersMePartialUpdateRaw(requestParameters: UsersMePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/me/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters.patchedUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersMePartialUpdate(requestParameters: UsersMePartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersMePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersMeRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/me/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersMeRetrieve(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersMeRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersMeUpdateRaw(requestParameters: UsersMeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/me/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersMeUpdate(requestParameters: UsersMeUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersMeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersPartialUpdateRaw(requestParameters: UsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters.patchedUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersPartialUpdate(requestParameters: UsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsLivedCreateRaw(requestParameters: UsersRegionsLivedCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionLived>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegionLivedToJSON(requestParameters.regionLived),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionLivedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsLivedCreate(requestParameters: UsersRegionsLivedCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionLived> {
        const response = await this.usersRegionsLivedCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsLivedDestroyRaw(requestParameters: UsersRegionsLivedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsLivedDestroy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersRegionsLivedDestroy(requestParameters: UsersRegionsLivedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersRegionsLivedDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersRegionsLivedListRaw(requestParameters: UsersRegionsLivedListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedRegionLivedList>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRegionLivedListFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsLivedList(requestParameters: UsersRegionsLivedListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedRegionLivedList> {
        const response = await this.usersRegionsLivedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsLivedPartialUpdateRaw(requestParameters: UsersRegionsLivedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionLived>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsLivedPartialUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRegionLivedToJSON(requestParameters.patchedRegionLived),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionLivedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsLivedPartialUpdate(requestParameters: UsersRegionsLivedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionLived> {
        const response = await this.usersRegionsLivedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsLivedRetrieveRaw(requestParameters: UsersRegionsLivedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionLived>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsLivedRetrieve.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionLivedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsLivedRetrieve(requestParameters: UsersRegionsLivedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionLived> {
        const response = await this.usersRegionsLivedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsLivedUpdateRaw(requestParameters: UsersRegionsLivedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionLived>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsLivedUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsLivedUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_lived/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegionLivedToJSON(requestParameters.regionLived),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionLivedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsLivedUpdate(requestParameters: UsersRegionsLivedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionLived> {
        const response = await this.usersRegionsLivedUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsVisitedCreateRaw(requestParameters: UsersRegionsVisitedCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionVisited>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedCreate.');
        }

        if (requestParameters.regionVisited === null || requestParameters.regionVisited === undefined) {
            throw new runtime.RequiredError('regionVisited','Required parameter requestParameters.regionVisited was null or undefined when calling usersRegionsVisitedCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegionVisitedToJSON(requestParameters.regionVisited),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionVisitedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsVisitedCreate(requestParameters: UsersRegionsVisitedCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionVisited> {
        const response = await this.usersRegionsVisitedCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsVisitedDestroyRaw(requestParameters: UsersRegionsVisitedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsVisitedDestroy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersRegionsVisitedDestroy(requestParameters: UsersRegionsVisitedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersRegionsVisitedDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersRegionsVisitedListRaw(requestParameters: UsersRegionsVisitedListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedRegionVisitedList>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRegionVisitedListFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsVisitedList(requestParameters: UsersRegionsVisitedListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedRegionVisitedList> {
        const response = await this.usersRegionsVisitedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsVisitedPartialUpdateRaw(requestParameters: UsersRegionsVisitedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionVisited>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsVisitedPartialUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRegionVisitedToJSON(requestParameters.patchedRegionVisited),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionVisitedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsVisitedPartialUpdate(requestParameters: UsersRegionsVisitedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionVisited> {
        const response = await this.usersRegionsVisitedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsVisitedRetrieveRaw(requestParameters: UsersRegionsVisitedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionVisited>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsVisitedRetrieve.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionVisitedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsVisitedRetrieve(requestParameters: UsersRegionsVisitedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionVisited> {
        const response = await this.usersRegionsVisitedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegionsVisitedUpdateRaw(requestParameters: UsersRegionsVisitedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegionVisited>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRegionsVisitedUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersRegionsVisitedUpdate.');
        }

        if (requestParameters.regionVisited === null || requestParameters.regionVisited === undefined) {
            throw new runtime.RequiredError('regionVisited','Required parameter requestParameters.regionVisited was null or undefined when calling usersRegionsVisitedUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/regions_visited/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegionVisitedToJSON(requestParameters.regionVisited),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionVisitedFromJSON(jsonValue));
    }

    /**
     */
    async usersRegionsVisitedUpdate(requestParameters: UsersRegionsVisitedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegionVisited> {
        const response = await this.usersRegionsVisitedUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersResendActivationCreateRaw(requestParameters: UsersResendActivationCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/resend_activation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersResendActivationCreate(requestParameters: UsersResendActivationCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersResendActivationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersResetPasswordConfirmCreateRaw(requestParameters: UsersResetPasswordConfirmCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/reset_password_confirm/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersResetPasswordConfirmCreate(requestParameters: UsersResetPasswordConfirmCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersResetPasswordConfirmCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersResetPasswordCreateRaw(requestParameters: UsersResetPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/reset_password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersResetPasswordCreate(requestParameters: UsersResetPasswordCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersResetPasswordCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersResetUsernameConfirmCreateRaw(requestParameters: UsersResetUsernameConfirmCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/reset_username_confirm/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersResetUsernameConfirmCreate(requestParameters: UsersResetUsernameConfirmCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersResetUsernameConfirmCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersResetUsernameCreateRaw(requestParameters: UsersResetUsernameCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/reset_username/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersResetUsernameCreate(requestParameters: UsersResetUsernameCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersResetUsernameCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRetrieveRaw(requestParameters: UsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersRetrieve(requestParameters: UsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersSetPasswordCreateRaw(requestParameters: UsersSetPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/set_password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersSetPasswordCreate(requestParameters: UsersSetPasswordCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersSetPasswordCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersSetUsernameCreateRaw(requestParameters: UsersSetUsernameCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/set_username/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersSetUsernameCreate(requestParameters: UsersSetUsernameCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersSetUsernameCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUpdateRaw(requestParameters: UsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersUpdate(requestParameters: UsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.usersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserBlocksCreateRaw(requestParameters: UsersUserBlocksCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UserBlock>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksCreate.');
        }

        if (requestParameters.userBlock === null || requestParameters.userBlock === undefined) {
            throw new runtime.RequiredError('userBlock','Required parameter requestParameters.userBlock was null or undefined when calling usersUserBlocksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBlockToJSON(requestParameters.userBlock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBlockFromJSON(jsonValue));
    }

    /**
     */
    async usersUserBlocksCreate(requestParameters: UsersUserBlocksCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UserBlock> {
        const response = await this.usersUserBlocksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserBlocksDestroyRaw(requestParameters: UsersUserBlocksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserBlocksDestroy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersUserBlocksDestroy(requestParameters: UsersUserBlocksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.usersUserBlocksDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUserBlocksListRaw(requestParameters: UsersUserBlocksListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedUserBlockList>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserBlockListFromJSON(jsonValue));
    }

    /**
     */
    async usersUserBlocksList(requestParameters: UsersUserBlocksListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedUserBlockList> {
        const response = await this.usersUserBlocksListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserBlocksPartialUpdateRaw(requestParameters: UsersUserBlocksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UserBlock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserBlocksPartialUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserBlockToJSON(requestParameters.patchedUserBlock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBlockFromJSON(jsonValue));
    }

    /**
     */
    async usersUserBlocksPartialUpdate(requestParameters: UsersUserBlocksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UserBlock> {
        const response = await this.usersUserBlocksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserBlocksRetrieveRaw(requestParameters: UsersUserBlocksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UserBlock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserBlocksRetrieve.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBlockFromJSON(jsonValue));
    }

    /**
     */
    async usersUserBlocksRetrieve(requestParameters: UsersUserBlocksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UserBlock> {
        const response = await this.usersUserBlocksRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserBlocksUpdateRaw(requestParameters: UsersUserBlocksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UserBlock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserBlocksUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserBlocksUpdate.');
        }

        if (requestParameters.userBlock === null || requestParameters.userBlock === undefined) {
            throw new runtime.RequiredError('userBlock','Required parameter requestParameters.userBlock was null or undefined when calling usersUserBlocksUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}/user_blocks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserBlockToJSON(requestParameters.userBlock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBlockFromJSON(jsonValue));
    }

    /**
     */
    async usersUserBlocksUpdate(requestParameters: UsersUserBlocksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UserBlock> {
        const response = await this.usersUserBlocksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
