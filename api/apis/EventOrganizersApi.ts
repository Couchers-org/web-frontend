/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventOrganizer,
    EventOrganizerFromJSON,
    EventOrganizerToJSON,
    PaginatedEventOrganizerList,
    PaginatedEventOrganizerListFromJSON,
    PaginatedEventOrganizerListToJSON,
    PatchedEventOrganizer,
    PatchedEventOrganizerFromJSON,
    PatchedEventOrganizerToJSON,
} from '../models';

export interface EventOrganizersCreateRequest {
    eventOrganizer?: EventOrganizer;
}

export interface EventOrganizersDestroyRequest {
    id: number;
}

export interface EventOrganizersListRequest {
    page?: number;
}

export interface EventOrganizersPartialUpdateRequest {
    id: number;
    patchedEventOrganizer?: PatchedEventOrganizer;
}

export interface EventOrganizersRetrieveRequest {
    id: number;
}

export interface EventOrganizersUpdateRequest {
    id: number;
    eventOrganizer?: EventOrganizer;
}

/**
 * 
 */
export class EventOrganizersApi extends runtime.BaseAPI {

    /**
     */
    async eventOrganizersCreateRaw(requestParameters: EventOrganizersCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOrganizer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventOrganizerToJSON(requestParameters.eventOrganizer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOrganizerFromJSON(jsonValue));
    }

    /**
     */
    async eventOrganizersCreate(requestParameters: EventOrganizersCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOrganizer> {
        const response = await this.eventOrganizersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOrganizersDestroyRaw(requestParameters: EventOrganizersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOrganizersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async eventOrganizersDestroy(requestParameters: EventOrganizersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.eventOrganizersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async eventOrganizersListRaw(requestParameters: EventOrganizersListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedEventOrganizerList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventOrganizerListFromJSON(jsonValue));
    }

    /**
     */
    async eventOrganizersList(requestParameters: EventOrganizersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedEventOrganizerList> {
        const response = await this.eventOrganizersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOrganizersPartialUpdateRaw(requestParameters: EventOrganizersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOrganizer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOrganizersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEventOrganizerToJSON(requestParameters.patchedEventOrganizer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOrganizerFromJSON(jsonValue));
    }

    /**
     */
    async eventOrganizersPartialUpdate(requestParameters: EventOrganizersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOrganizer> {
        const response = await this.eventOrganizersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOrganizersRetrieveRaw(requestParameters: EventOrganizersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOrganizer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOrganizersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOrganizerFromJSON(jsonValue));
    }

    /**
     */
    async eventOrganizersRetrieve(requestParameters: EventOrganizersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOrganizer> {
        const response = await this.eventOrganizersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOrganizersUpdateRaw(requestParameters: EventOrganizersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOrganizer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOrganizersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_organizers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventOrganizerToJSON(requestParameters.eventOrganizer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOrganizerFromJSON(jsonValue));
    }

    /**
     */
    async eventOrganizersUpdate(requestParameters: EventOrganizersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOrganizer> {
        const response = await this.eventOrganizersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
