/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotificationPreference,
    NotificationPreferenceFromJSON,
    NotificationPreferenceToJSON,
    PaginatedNotificationPreferenceList,
    PaginatedNotificationPreferenceListFromJSON,
    PaginatedNotificationPreferenceListToJSON,
    PatchedNotificationPreference,
    PatchedNotificationPreferenceFromJSON,
    PatchedNotificationPreferenceToJSON,
} from '../models';

export interface NotificationPreferencesCreateRequest {
    notificationPreference?: NotificationPreference;
}

export interface NotificationPreferencesDestroyRequest {
    id: number;
}

export interface NotificationPreferencesListRequest {
    page?: number;
}

export interface NotificationPreferencesPartialUpdateRequest {
    id: number;
    patchedNotificationPreference?: PatchedNotificationPreference;
}

export interface NotificationPreferencesRetrieveRequest {
    id: number;
}

export interface NotificationPreferencesUpdateRequest {
    id: number;
    notificationPreference?: NotificationPreference;
}

/**
 * 
 */
export class NotificationPreferencesApi extends runtime.BaseAPI {

    /**
     */
    async notificationPreferencesCreateRaw(requestParameters: NotificationPreferencesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationPreference>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationPreferenceToJSON(requestParameters.notificationPreference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationPreferenceFromJSON(jsonValue));
    }

    /**
     */
    async notificationPreferencesCreate(requestParameters: NotificationPreferencesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationPreference> {
        const response = await this.notificationPreferencesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationPreferencesDestroyRaw(requestParameters: NotificationPreferencesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationPreferencesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationPreferencesDestroy(requestParameters: NotificationPreferencesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.notificationPreferencesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationPreferencesListRaw(requestParameters: NotificationPreferencesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedNotificationPreferenceList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationPreferenceListFromJSON(jsonValue));
    }

    /**
     */
    async notificationPreferencesList(requestParameters: NotificationPreferencesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedNotificationPreferenceList> {
        const response = await this.notificationPreferencesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationPreferencesPartialUpdateRaw(requestParameters: NotificationPreferencesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationPreference>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationPreferencesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNotificationPreferenceToJSON(requestParameters.patchedNotificationPreference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationPreferenceFromJSON(jsonValue));
    }

    /**
     */
    async notificationPreferencesPartialUpdate(requestParameters: NotificationPreferencesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationPreference> {
        const response = await this.notificationPreferencesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationPreferencesRetrieveRaw(requestParameters: NotificationPreferencesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationPreference>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationPreferencesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationPreferenceFromJSON(jsonValue));
    }

    /**
     */
    async notificationPreferencesRetrieve(requestParameters: NotificationPreferencesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationPreference> {
        const response = await this.notificationPreferencesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationPreferencesUpdateRaw(requestParameters: NotificationPreferencesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NotificationPreference>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling notificationPreferencesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/notification_preferences/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationPreferenceToJSON(requestParameters.notificationPreference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationPreferenceFromJSON(jsonValue));
    }

    /**
     */
    async notificationPreferencesUpdate(requestParameters: NotificationPreferencesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NotificationPreference> {
        const response = await this.notificationPreferencesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
