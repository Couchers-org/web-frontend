/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventSubscription,
    EventSubscriptionFromJSON,
    EventSubscriptionToJSON,
    PaginatedEventSubscriptionList,
    PaginatedEventSubscriptionListFromJSON,
    PaginatedEventSubscriptionListToJSON,
    PatchedEventSubscription,
    PatchedEventSubscriptionFromJSON,
    PatchedEventSubscriptionToJSON,
} from '../models';

export interface EventSubscriptionsCreateRequest {
    eventSubscription?: EventSubscription;
}

export interface EventSubscriptionsDestroyRequest {
    id: number;
}

export interface EventSubscriptionsListRequest {
    page?: number;
}

export interface EventSubscriptionsPartialUpdateRequest {
    id: number;
    patchedEventSubscription?: PatchedEventSubscription;
}

export interface EventSubscriptionsRetrieveRequest {
    id: number;
}

export interface EventSubscriptionsUpdateRequest {
    id: number;
    eventSubscription?: EventSubscription;
}

/**
 * 
 */
export class EventSubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async eventSubscriptionsCreateRaw(requestParameters: EventSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventSubscription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventSubscriptionToJSON(requestParameters.eventSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async eventSubscriptionsCreate(requestParameters: EventSubscriptionsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventSubscription> {
        const response = await this.eventSubscriptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventSubscriptionsDestroyRaw(requestParameters: EventSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventSubscriptionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async eventSubscriptionsDestroy(requestParameters: EventSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.eventSubscriptionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async eventSubscriptionsListRaw(requestParameters: EventSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedEventSubscriptionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async eventSubscriptionsList(requestParameters: EventSubscriptionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedEventSubscriptionList> {
        const response = await this.eventSubscriptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventSubscriptionsPartialUpdateRaw(requestParameters: EventSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventSubscriptionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEventSubscriptionToJSON(requestParameters.patchedEventSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async eventSubscriptionsPartialUpdate(requestParameters: EventSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventSubscription> {
        const response = await this.eventSubscriptionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventSubscriptionsRetrieveRaw(requestParameters: EventSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventSubscriptionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async eventSubscriptionsRetrieve(requestParameters: EventSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventSubscription> {
        const response = await this.eventSubscriptionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventSubscriptionsUpdateRaw(requestParameters: EventSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventSubscriptionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventSubscriptionToJSON(requestParameters.eventSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async eventSubscriptionsUpdate(requestParameters: EventSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventSubscription> {
        const response = await this.eventSubscriptionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
