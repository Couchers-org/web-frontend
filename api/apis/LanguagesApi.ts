/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Language,
    LanguageFromJSON,
    LanguageToJSON,
    PaginatedLanguageList,
    PaginatedLanguageListFromJSON,
    PaginatedLanguageListToJSON,
    PatchedLanguage,
    PatchedLanguageFromJSON,
    PatchedLanguageToJSON,
} from '../models';

export interface LanguagesCreateRequest {
    language: Language;
}

export interface LanguagesDestroyRequest {
    id: number;
}

export interface LanguagesListRequest {
    page?: number;
}

export interface LanguagesPartialUpdateRequest {
    id: number;
    patchedLanguage?: PatchedLanguage;
}

export interface LanguagesRetrieveRequest {
    id: number;
}

export interface LanguagesUpdateRequest {
    id: number;
    language: Language;
}

/**
 * 
 */
export class LanguagesApi extends runtime.BaseAPI {

    /**
     */
    async languagesCreateRaw(requestParameters: LanguagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Language>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling languagesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/languages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageToJSON(requestParameters.language),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageFromJSON(jsonValue));
    }

    /**
     */
    async languagesCreate(requestParameters: LanguagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Language> {
        const response = await this.languagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesDestroyRaw(requestParameters: LanguagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesDestroy(requestParameters: LanguagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.languagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesListRaw(requestParameters: LanguagesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedLanguageList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLanguageListFromJSON(jsonValue));
    }

    /**
     */
    async languagesList(requestParameters: LanguagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedLanguageList> {
        const response = await this.languagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesPartialUpdateRaw(requestParameters: LanguagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Language>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLanguageToJSON(requestParameters.patchedLanguage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageFromJSON(jsonValue));
    }

    /**
     */
    async languagesPartialUpdate(requestParameters: LanguagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Language> {
        const response = await this.languagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesRetrieveRaw(requestParameters: LanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Language>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageFromJSON(jsonValue));
    }

    /**
     */
    async languagesRetrieve(requestParameters: LanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Language> {
        const response = await this.languagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesUpdateRaw(requestParameters: LanguagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Language>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesUpdate.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling languagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/languages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageToJSON(requestParameters.language),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageFromJSON(jsonValue));
    }

    /**
     */
    async languagesUpdate(requestParameters: LanguagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Language> {
        const response = await this.languagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
