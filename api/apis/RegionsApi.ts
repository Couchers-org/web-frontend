/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedRegionList,
    PaginatedRegionListFromJSON,
    PaginatedRegionListToJSON,
    PatchedRegion,
    PatchedRegionFromJSON,
    PatchedRegionToJSON,
    Region,
    RegionFromJSON,
    RegionToJSON,
} from '../models';

export interface RegionsCreateRequest {
    region: Region;
}

export interface RegionsDestroyRequest {
    id: number;
}

export interface RegionsListRequest {
    page?: number;
}

export interface RegionsPartialUpdateRequest {
    id: number;
    patchedRegion?: PatchedRegion;
}

export interface RegionsRetrieveRequest {
    id: number;
}

export interface RegionsUpdateRequest {
    id: number;
    region: Region;
}

/**
 * 
 */
export class RegionsApi extends runtime.BaseAPI {

    /**
     */
    async regionsCreateRaw(requestParameters: RegionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Region>> {
        if (requestParameters.region === null || requestParameters.region === undefined) {
            throw new runtime.RequiredError('region','Required parameter requestParameters.region was null or undefined when calling regionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/regions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegionToJSON(requestParameters.region),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     */
    async regionsCreate(requestParameters: RegionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Region> {
        const response = await this.regionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsDestroyRaw(requestParameters: RegionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling regionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/regions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async regionsDestroy(requestParameters: RegionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.regionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async regionsListRaw(requestParameters: RegionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedRegionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRegionListFromJSON(jsonValue));
    }

    /**
     */
    async regionsList(requestParameters: RegionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedRegionList> {
        const response = await this.regionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsPartialUpdateRaw(requestParameters: RegionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Region>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling regionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/regions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRegionToJSON(requestParameters.patchedRegion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     */
    async regionsPartialUpdate(requestParameters: RegionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Region> {
        const response = await this.regionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsRetrieveRaw(requestParameters: RegionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Region>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling regionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     */
    async regionsRetrieve(requestParameters: RegionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Region> {
        const response = await this.regionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsUpdateRaw(requestParameters: RegionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Region>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling regionsUpdate.');
        }

        if (requestParameters.region === null || requestParameters.region === undefined) {
            throw new runtime.RequiredError('region','Required parameter requestParameters.region was null or undefined when calling regionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/regions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegionToJSON(requestParameters.region),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     */
    async regionsUpdate(requestParameters: RegionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Region> {
        const response = await this.regionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
