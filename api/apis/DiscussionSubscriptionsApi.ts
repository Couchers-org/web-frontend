/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DiscussionSubscription,
    DiscussionSubscriptionFromJSON,
    DiscussionSubscriptionToJSON,
    PaginatedDiscussionSubscriptionList,
    PaginatedDiscussionSubscriptionListFromJSON,
    PaginatedDiscussionSubscriptionListToJSON,
    PatchedDiscussionSubscription,
    PatchedDiscussionSubscriptionFromJSON,
    PatchedDiscussionSubscriptionToJSON,
} from '../models';

export interface DiscussionSubscriptionsCreateRequest {
    discussionSubscription?: DiscussionSubscription;
}

export interface DiscussionSubscriptionsDestroyRequest {
    id: number;
}

export interface DiscussionSubscriptionsListRequest {
    page?: number;
}

export interface DiscussionSubscriptionsPartialUpdateRequest {
    id: number;
    patchedDiscussionSubscription?: PatchedDiscussionSubscription;
}

export interface DiscussionSubscriptionsRetrieveRequest {
    id: number;
}

export interface DiscussionSubscriptionsUpdateRequest {
    id: number;
    discussionSubscription?: DiscussionSubscription;
}

/**
 * 
 */
export class DiscussionSubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async discussionSubscriptionsCreateRaw(requestParameters: DiscussionSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DiscussionSubscription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscussionSubscriptionToJSON(requestParameters.discussionSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async discussionSubscriptionsCreate(requestParameters: DiscussionSubscriptionsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DiscussionSubscription> {
        const response = await this.discussionSubscriptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionSubscriptionsDestroyRaw(requestParameters: DiscussionSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionSubscriptionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async discussionSubscriptionsDestroy(requestParameters: DiscussionSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.discussionSubscriptionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discussionSubscriptionsListRaw(requestParameters: DiscussionSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedDiscussionSubscriptionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDiscussionSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async discussionSubscriptionsList(requestParameters: DiscussionSubscriptionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedDiscussionSubscriptionList> {
        const response = await this.discussionSubscriptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionSubscriptionsPartialUpdateRaw(requestParameters: DiscussionSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DiscussionSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionSubscriptionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDiscussionSubscriptionToJSON(requestParameters.patchedDiscussionSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async discussionSubscriptionsPartialUpdate(requestParameters: DiscussionSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DiscussionSubscription> {
        const response = await this.discussionSubscriptionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionSubscriptionsRetrieveRaw(requestParameters: DiscussionSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DiscussionSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionSubscriptionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async discussionSubscriptionsRetrieve(requestParameters: DiscussionSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DiscussionSubscription> {
        const response = await this.discussionSubscriptionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discussionSubscriptionsUpdateRaw(requestParameters: DiscussionSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DiscussionSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling discussionSubscriptionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/discussion_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DiscussionSubscriptionToJSON(requestParameters.discussionSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscussionSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async discussionSubscriptionsUpdate(requestParameters: DiscussionSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DiscussionSubscription> {
        const response = await this.discussionSubscriptionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
