/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Email,
    EmailFromJSON,
    EmailToJSON,
    PaginatedEmailList,
    PaginatedEmailListFromJSON,
    PaginatedEmailListToJSON,
    PatchedEmail,
    PatchedEmailFromJSON,
    PatchedEmailToJSON,
} from '../models';

export interface EmailsCreateRequest {
    email?: Email;
}

export interface EmailsDestroyRequest {
    id: string;
}

export interface EmailsListRequest {
    page?: number;
}

export interface EmailsPartialUpdateRequest {
    id: string;
    patchedEmail?: PatchedEmail;
}

export interface EmailsRetrieveRequest {
    id: string;
}

export interface EmailsUpdateRequest {
    id: string;
    email?: Email;
}

/**
 * 
 */
export class EmailsApi extends runtime.BaseAPI {

    /**
     */
    async emailsCreateRaw(requestParameters: EmailsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Email>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailToJSON(requestParameters.email),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     */
    async emailsCreate(requestParameters: EmailsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Email> {
        const response = await this.emailsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emailsDestroyRaw(requestParameters: EmailsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emailsDestroy(requestParameters: EmailsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.emailsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async emailsListRaw(requestParameters: EmailsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedEmailList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailListFromJSON(jsonValue));
    }

    /**
     */
    async emailsList(requestParameters: EmailsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedEmailList> {
        const response = await this.emailsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emailsPartialUpdateRaw(requestParameters: EmailsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailToJSON(requestParameters.patchedEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     */
    async emailsPartialUpdate(requestParameters: EmailsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Email> {
        const response = await this.emailsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emailsRetrieveRaw(requestParameters: EmailsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     */
    async emailsRetrieve(requestParameters: EmailsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Email> {
        const response = await this.emailsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emailsUpdateRaw(requestParameters: EmailsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/emails/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailToJSON(requestParameters.email),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     */
    async emailsUpdate(requestParameters: EmailsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Email> {
        const response = await this.emailsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
