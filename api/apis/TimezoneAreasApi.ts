/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedTimezoneAreaList,
    PaginatedTimezoneAreaListFromJSON,
    PaginatedTimezoneAreaListToJSON,
    PatchedTimezoneArea,
    PatchedTimezoneAreaFromJSON,
    PatchedTimezoneAreaToJSON,
    TimezoneArea,
    TimezoneAreaFromJSON,
    TimezoneAreaToJSON,
} from '../models';

export interface TimezoneAreasCreateRequest {
    timezoneArea: TimezoneArea;
}

export interface TimezoneAreasDestroyRequest {
    id: number;
}

export interface TimezoneAreasListRequest {
    page?: number;
}

export interface TimezoneAreasPartialUpdateRequest {
    id: number;
    patchedTimezoneArea?: PatchedTimezoneArea;
}

export interface TimezoneAreasRetrieveRequest {
    id: number;
}

export interface TimezoneAreasUpdateRequest {
    id: number;
    timezoneArea: TimezoneArea;
}

/**
 * 
 */
export class TimezoneAreasApi extends runtime.BaseAPI {

    /**
     */
    async timezoneAreasCreateRaw(requestParameters: TimezoneAreasCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TimezoneArea>> {
        if (requestParameters.timezoneArea === null || requestParameters.timezoneArea === undefined) {
            throw new runtime.RequiredError('timezoneArea','Required parameter requestParameters.timezoneArea was null or undefined when calling timezoneAreasCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/timezone_areas/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimezoneAreaToJSON(requestParameters.timezoneArea),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimezoneAreaFromJSON(jsonValue));
    }

    /**
     */
    async timezoneAreasCreate(requestParameters: TimezoneAreasCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TimezoneArea> {
        const response = await this.timezoneAreasCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timezoneAreasDestroyRaw(requestParameters: TimezoneAreasDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timezoneAreasDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/timezone_areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async timezoneAreasDestroy(requestParameters: TimezoneAreasDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.timezoneAreasDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async timezoneAreasListRaw(requestParameters: TimezoneAreasListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedTimezoneAreaList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timezone_areas/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTimezoneAreaListFromJSON(jsonValue));
    }

    /**
     */
    async timezoneAreasList(requestParameters: TimezoneAreasListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedTimezoneAreaList> {
        const response = await this.timezoneAreasListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timezoneAreasPartialUpdateRaw(requestParameters: TimezoneAreasPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TimezoneArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timezoneAreasPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/timezone_areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTimezoneAreaToJSON(requestParameters.patchedTimezoneArea),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimezoneAreaFromJSON(jsonValue));
    }

    /**
     */
    async timezoneAreasPartialUpdate(requestParameters: TimezoneAreasPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TimezoneArea> {
        const response = await this.timezoneAreasPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timezoneAreasRetrieveRaw(requestParameters: TimezoneAreasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TimezoneArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timezoneAreasRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timezone_areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimezoneAreaFromJSON(jsonValue));
    }

    /**
     */
    async timezoneAreasRetrieve(requestParameters: TimezoneAreasRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TimezoneArea> {
        const response = await this.timezoneAreasRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timezoneAreasUpdateRaw(requestParameters: TimezoneAreasUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TimezoneArea>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timezoneAreasUpdate.');
        }

        if (requestParameters.timezoneArea === null || requestParameters.timezoneArea === undefined) {
            throw new runtime.RequiredError('timezoneArea','Required parameter requestParameters.timezoneArea was null or undefined when calling timezoneAreasUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/timezone_areas/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimezoneAreaToJSON(requestParameters.timezoneArea),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimezoneAreaFromJSON(jsonValue));
    }

    /**
     */
    async timezoneAreasUpdate(requestParameters: TimezoneAreasUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TimezoneArea> {
        const response = await this.timezoneAreasUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
