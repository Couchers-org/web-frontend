/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Message,
    MessageFromJSON,
    MessageToJSON,
    PaginatedMessageList,
    PaginatedMessageListFromJSON,
    PaginatedMessageListToJSON,
    PatchedMessage,
    PatchedMessageFromJSON,
    PatchedMessageToJSON,
} from '../models';

export interface MessagesCreateRequest {
    message?: Message;
}

export interface MessagesDestroyRequest {
    id: number;
}

export interface MessagesListRequest {
    page?: number;
}

export interface MessagesPartialUpdateRequest {
    id: number;
    patchedMessage?: PatchedMessage;
}

export interface MessagesRetrieveRequest {
    id: number;
}

export interface MessagesUpdateRequest {
    id: number;
    message?: Message;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     */
    async messagesCreateRaw(requestParameters: MessagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Message>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageToJSON(requestParameters.message),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     */
    async messagesCreate(requestParameters: MessagesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Message> {
        const response = await this.messagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async messagesDestroyRaw(requestParameters: MessagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling messagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async messagesDestroy(requestParameters: MessagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.messagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async messagesListRaw(requestParameters: MessagesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedMessageList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMessageListFromJSON(jsonValue));
    }

    /**
     */
    async messagesList(requestParameters: MessagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedMessageList> {
        const response = await this.messagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async messagesPartialUpdateRaw(requestParameters: MessagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling messagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedMessageToJSON(requestParameters.patchedMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     */
    async messagesPartialUpdate(requestParameters: MessagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Message> {
        const response = await this.messagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async messagesRetrieveRaw(requestParameters: MessagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling messagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     */
    async messagesRetrieve(requestParameters: MessagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Message> {
        const response = await this.messagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async messagesUpdateRaw(requestParameters: MessagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling messagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MessageToJSON(requestParameters.message),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     */
    async messagesUpdate(requestParameters: MessagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Message> {
        const response = await this.messagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
