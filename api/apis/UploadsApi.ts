/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedUploadList,
    PaginatedUploadListFromJSON,
    PaginatedUploadListToJSON,
    PatchedUpload,
    PatchedUploadFromJSON,
    PatchedUploadToJSON,
    Upload,
    UploadFromJSON,
    UploadToJSON,
} from '../models';

export interface UploadsCreateRequest {
    upload?: Upload;
}

export interface UploadsDestroyRequest {
    key: string;
}

export interface UploadsListRequest {
    page?: number;
}

export interface UploadsPartialUpdateRequest {
    key: string;
    patchedUpload?: PatchedUpload;
}

export interface UploadsRetrieveRequest {
    key: string;
}

export interface UploadsUpdateRequest {
    key: string;
    upload?: Upload;
}

/**
 * 
 */
export class UploadsApi extends runtime.BaseAPI {

    /**
     */
    async uploadsCreateRaw(requestParameters: UploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Upload>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadToJSON(requestParameters.upload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFromJSON(jsonValue));
    }

    /**
     */
    async uploadsCreate(requestParameters: UploadsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Upload> {
        const response = await this.uploadsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadsDestroyRaw(requestParameters: UploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling uploadsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/{key}/`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async uploadsDestroy(requestParameters: UploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.uploadsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async uploadsListRaw(requestParameters: UploadsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedUploadList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUploadListFromJSON(jsonValue));
    }

    /**
     */
    async uploadsList(requestParameters: UploadsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedUploadList> {
        const response = await this.uploadsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadsPartialUpdateRaw(requestParameters: UploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Upload>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling uploadsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/{key}/`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUploadToJSON(requestParameters.patchedUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFromJSON(jsonValue));
    }

    /**
     */
    async uploadsPartialUpdate(requestParameters: UploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Upload> {
        const response = await this.uploadsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadsRetrieveRaw(requestParameters: UploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Upload>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling uploadsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/{key}/`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFromJSON(jsonValue));
    }

    /**
     */
    async uploadsRetrieve(requestParameters: UploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Upload> {
        const response = await this.uploadsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadsUpdateRaw(requestParameters: UploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Upload>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling uploadsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/uploads/{key}/`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UploadToJSON(requestParameters.upload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFromJSON(jsonValue));
    }

    /**
     */
    async uploadsUpdate(requestParameters: UploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Upload> {
        const response = await this.uploadsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
