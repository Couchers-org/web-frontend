/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PageVersion,
    PageVersionFromJSON,
    PageVersionToJSON,
    PaginatedPageVersionList,
    PaginatedPageVersionListFromJSON,
    PaginatedPageVersionListToJSON,
    PatchedPageVersion,
    PatchedPageVersionFromJSON,
    PatchedPageVersionToJSON,
} from '../models';

export interface PageVersionsCreateRequest {
    pageVersion?: PageVersion;
}

export interface PageVersionsDestroyRequest {
    id: number;
}

export interface PageVersionsListRequest {
    page?: number;
}

export interface PageVersionsPartialUpdateRequest {
    id: number;
    patchedPageVersion?: PatchedPageVersion;
}

export interface PageVersionsRetrieveRequest {
    id: number;
}

export interface PageVersionsUpdateRequest {
    id: number;
    pageVersion?: PageVersion;
}

/**
 * 
 */
export class PageVersionsApi extends runtime.BaseAPI {

    /**
     */
    async pageVersionsCreateRaw(requestParameters: PageVersionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PageVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PageVersionToJSON(requestParameters.pageVersion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageVersionFromJSON(jsonValue));
    }

    /**
     */
    async pageVersionsCreate(requestParameters: PageVersionsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PageVersion> {
        const response = await this.pageVersionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pageVersionsDestroyRaw(requestParameters: PageVersionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pageVersionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pageVersionsDestroy(requestParameters: PageVersionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.pageVersionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pageVersionsListRaw(requestParameters: PageVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedPageVersionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPageVersionListFromJSON(jsonValue));
    }

    /**
     */
    async pageVersionsList(requestParameters: PageVersionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedPageVersionList> {
        const response = await this.pageVersionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pageVersionsPartialUpdateRaw(requestParameters: PageVersionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PageVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pageVersionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPageVersionToJSON(requestParameters.patchedPageVersion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageVersionFromJSON(jsonValue));
    }

    /**
     */
    async pageVersionsPartialUpdate(requestParameters: PageVersionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PageVersion> {
        const response = await this.pageVersionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pageVersionsRetrieveRaw(requestParameters: PageVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PageVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pageVersionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageVersionFromJSON(jsonValue));
    }

    /**
     */
    async pageVersionsRetrieve(requestParameters: PageVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PageVersion> {
        const response = await this.pageVersionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pageVersionsUpdateRaw(requestParameters: PageVersionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PageVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pageVersionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/page_versions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PageVersionToJSON(requestParameters.pageVersion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageVersionFromJSON(jsonValue));
    }

    /**
     */
    async pageVersionsUpdate(requestParameters: PageVersionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PageVersion> {
        const response = await this.pageVersionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
