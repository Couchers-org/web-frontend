/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedSignupFlowList,
    PaginatedSignupFlowListFromJSON,
    PaginatedSignupFlowListToJSON,
    PatchedSignupFlow,
    PatchedSignupFlowFromJSON,
    PatchedSignupFlowToJSON,
    SignupFlow,
    SignupFlowFromJSON,
    SignupFlowToJSON,
} from '../models';

export interface SignupFlowsCreateRequest {
    signupFlow: SignupFlow;
}

export interface SignupFlowsDestroyRequest {
    id: number;
}

export interface SignupFlowsListRequest {
    page?: number;
}

export interface SignupFlowsPartialUpdateRequest {
    id: number;
    patchedSignupFlow?: PatchedSignupFlow;
}

export interface SignupFlowsRetrieveRequest {
    id: number;
}

export interface SignupFlowsUpdateRequest {
    id: number;
    signupFlow: SignupFlow;
}

/**
 * 
 */
export class SignupFlowsApi extends runtime.BaseAPI {

    /**
     */
    async signupFlowsCreateRaw(requestParameters: SignupFlowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SignupFlow>> {
        if (requestParameters.signupFlow === null || requestParameters.signupFlow === undefined) {
            throw new runtime.RequiredError('signupFlow','Required parameter requestParameters.signupFlow was null or undefined when calling signupFlowsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupFlowToJSON(requestParameters.signupFlow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFlowFromJSON(jsonValue));
    }

    /**
     */
    async signupFlowsCreate(requestParameters: SignupFlowsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SignupFlow> {
        const response = await this.signupFlowsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signupFlowsDestroyRaw(requestParameters: SignupFlowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling signupFlowsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signupFlowsDestroy(requestParameters: SignupFlowsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.signupFlowsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signupFlowsListRaw(requestParameters: SignupFlowsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedSignupFlowList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSignupFlowListFromJSON(jsonValue));
    }

    /**
     */
    async signupFlowsList(requestParameters: SignupFlowsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedSignupFlowList> {
        const response = await this.signupFlowsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signupFlowsPartialUpdateRaw(requestParameters: SignupFlowsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SignupFlow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling signupFlowsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSignupFlowToJSON(requestParameters.patchedSignupFlow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFlowFromJSON(jsonValue));
    }

    /**
     */
    async signupFlowsPartialUpdate(requestParameters: SignupFlowsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SignupFlow> {
        const response = await this.signupFlowsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signupFlowsRetrieveRaw(requestParameters: SignupFlowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SignupFlow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling signupFlowsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFlowFromJSON(jsonValue));
    }

    /**
     */
    async signupFlowsRetrieve(requestParameters: SignupFlowsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SignupFlow> {
        const response = await this.signupFlowsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signupFlowsUpdateRaw(requestParameters: SignupFlowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SignupFlow>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling signupFlowsUpdate.');
        }

        if (requestParameters.signupFlow === null || requestParameters.signupFlow === undefined) {
            throw new runtime.RequiredError('signupFlow','Required parameter requestParameters.signupFlow was null or undefined when calling signupFlowsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/signup_flows/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SignupFlowToJSON(requestParameters.signupFlow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFlowFromJSON(jsonValue));
    }

    /**
     */
    async signupFlowsUpdate(requestParameters: SignupFlowsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SignupFlow> {
        const response = await this.signupFlowsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
