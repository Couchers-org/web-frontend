/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventOccurrenceAttendee,
    EventOccurrenceAttendeeFromJSON,
    EventOccurrenceAttendeeToJSON,
    PaginatedEventOccurrenceAttendeeList,
    PaginatedEventOccurrenceAttendeeListFromJSON,
    PaginatedEventOccurrenceAttendeeListToJSON,
    PatchedEventOccurrenceAttendee,
    PatchedEventOccurrenceAttendeeFromJSON,
    PatchedEventOccurrenceAttendeeToJSON,
} from '../models';

export interface EventOccurrenceAttendeesCreateRequest {
    eventOccurrenceAttendee: EventOccurrenceAttendee;
}

export interface EventOccurrenceAttendeesDestroyRequest {
    id: number;
}

export interface EventOccurrenceAttendeesListRequest {
    page?: number;
}

export interface EventOccurrenceAttendeesPartialUpdateRequest {
    id: number;
    patchedEventOccurrenceAttendee?: PatchedEventOccurrenceAttendee;
}

export interface EventOccurrenceAttendeesRetrieveRequest {
    id: number;
}

export interface EventOccurrenceAttendeesUpdateRequest {
    id: number;
    eventOccurrenceAttendee: EventOccurrenceAttendee;
}

/**
 * 
 */
export class EventOccurrenceAttendeesApi extends runtime.BaseAPI {

    /**
     */
    async eventOccurrenceAttendeesCreateRaw(requestParameters: EventOccurrenceAttendeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrenceAttendee>> {
        if (requestParameters.eventOccurrenceAttendee === null || requestParameters.eventOccurrenceAttendee === undefined) {
            throw new runtime.RequiredError('eventOccurrenceAttendee','Required parameter requestParameters.eventOccurrenceAttendee was null or undefined when calling eventOccurrenceAttendeesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventOccurrenceAttendeeToJSON(requestParameters.eventOccurrenceAttendee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceAttendeeFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrenceAttendeesCreate(requestParameters: EventOccurrenceAttendeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrenceAttendee> {
        const response = await this.eventOccurrenceAttendeesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrenceAttendeesDestroyRaw(requestParameters: EventOccurrenceAttendeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrenceAttendeesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async eventOccurrenceAttendeesDestroy(requestParameters: EventOccurrenceAttendeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.eventOccurrenceAttendeesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async eventOccurrenceAttendeesListRaw(requestParameters: EventOccurrenceAttendeesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedEventOccurrenceAttendeeList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventOccurrenceAttendeeListFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrenceAttendeesList(requestParameters: EventOccurrenceAttendeesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedEventOccurrenceAttendeeList> {
        const response = await this.eventOccurrenceAttendeesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrenceAttendeesPartialUpdateRaw(requestParameters: EventOccurrenceAttendeesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrenceAttendee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrenceAttendeesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEventOccurrenceAttendeeToJSON(requestParameters.patchedEventOccurrenceAttendee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceAttendeeFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrenceAttendeesPartialUpdate(requestParameters: EventOccurrenceAttendeesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrenceAttendee> {
        const response = await this.eventOccurrenceAttendeesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrenceAttendeesRetrieveRaw(requestParameters: EventOccurrenceAttendeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrenceAttendee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrenceAttendeesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceAttendeeFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrenceAttendeesRetrieve(requestParameters: EventOccurrenceAttendeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrenceAttendee> {
        const response = await this.eventOccurrenceAttendeesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eventOccurrenceAttendeesUpdateRaw(requestParameters: EventOccurrenceAttendeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<EventOccurrenceAttendee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventOccurrenceAttendeesUpdate.');
        }

        if (requestParameters.eventOccurrenceAttendee === null || requestParameters.eventOccurrenceAttendee === undefined) {
            throw new runtime.RequiredError('eventOccurrenceAttendee','Required parameter requestParameters.eventOccurrenceAttendee was null or undefined when calling eventOccurrenceAttendeesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/event_occurrence_attendees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventOccurrenceAttendeeToJSON(requestParameters.eventOccurrenceAttendee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventOccurrenceAttendeeFromJSON(jsonValue));
    }

    /**
     */
    async eventOccurrenceAttendeesUpdate(requestParameters: EventOccurrenceAttendeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<EventOccurrenceAttendee> {
        const response = await this.eventOccurrenceAttendeesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
