/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedReplyList,
    PaginatedReplyListFromJSON,
    PaginatedReplyListToJSON,
    PatchedReply,
    PatchedReplyFromJSON,
    PatchedReplyToJSON,
    Reply,
    ReplyFromJSON,
    ReplyToJSON,
} from '../models';

export interface RepliesCreateRequest {
    reply?: Reply;
}

export interface RepliesDestroyRequest {
    id: number;
}

export interface RepliesListRequest {
    page?: number;
}

export interface RepliesPartialUpdateRequest {
    id: number;
    patchedReply?: PatchedReply;
}

export interface RepliesRetrieveRequest {
    id: number;
}

export interface RepliesUpdateRequest {
    id: number;
    reply?: Reply;
}

/**
 * 
 */
export class RepliesApi extends runtime.BaseAPI {

    /**
     */
    async repliesCreateRaw(requestParameters: RepliesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Reply>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToJSON(requestParameters.reply),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async repliesCreate(requestParameters: RepliesCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reply> {
        const response = await this.repliesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async repliesDestroyRaw(requestParameters: RepliesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repliesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async repliesDestroy(requestParameters: RepliesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.repliesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async repliesListRaw(requestParameters: RepliesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedReplyList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedReplyListFromJSON(jsonValue));
    }

    /**
     */
    async repliesList(requestParameters: RepliesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedReplyList> {
        const response = await this.repliesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async repliesPartialUpdateRaw(requestParameters: RepliesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repliesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedReplyToJSON(requestParameters.patchedReply),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async repliesPartialUpdate(requestParameters: RepliesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reply> {
        const response = await this.repliesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async repliesRetrieveRaw(requestParameters: RepliesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repliesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async repliesRetrieve(requestParameters: RepliesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reply> {
        const response = await this.repliesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async repliesUpdateRaw(requestParameters: RepliesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repliesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/replies/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToJSON(requestParameters.reply),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async repliesUpdate(requestParameters: RepliesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reply> {
        const response = await this.repliesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
