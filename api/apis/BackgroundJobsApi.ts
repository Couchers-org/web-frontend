/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BackgroundJob,
    BackgroundJobFromJSON,
    BackgroundJobToJSON,
    PaginatedBackgroundJobList,
    PaginatedBackgroundJobListFromJSON,
    PaginatedBackgroundJobListToJSON,
    PatchedBackgroundJob,
    PatchedBackgroundJobFromJSON,
    PatchedBackgroundJobToJSON,
} from '../models';

export interface BackgroundJobsCreateRequest {
    backgroundJob: BackgroundJob;
}

export interface BackgroundJobsDestroyRequest {
    id: number;
}

export interface BackgroundJobsListRequest {
    page?: number;
}

export interface BackgroundJobsPartialUpdateRequest {
    id: number;
    patchedBackgroundJob?: PatchedBackgroundJob;
}

export interface BackgroundJobsRetrieveRequest {
    id: number;
}

export interface BackgroundJobsUpdateRequest {
    id: number;
    backgroundJob: BackgroundJob;
}

/**
 * 
 */
export class BackgroundJobsApi extends runtime.BaseAPI {

    /**
     */
    async backgroundJobsCreateRaw(requestParameters: BackgroundJobsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BackgroundJob>> {
        if (requestParameters.backgroundJob === null || requestParameters.backgroundJob === undefined) {
            throw new runtime.RequiredError('backgroundJob','Required parameter requestParameters.backgroundJob was null or undefined when calling backgroundJobsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackgroundJobToJSON(requestParameters.backgroundJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackgroundJobFromJSON(jsonValue));
    }

    /**
     */
    async backgroundJobsCreate(requestParameters: BackgroundJobsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BackgroundJob> {
        const response = await this.backgroundJobsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async backgroundJobsDestroyRaw(requestParameters: BackgroundJobsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling backgroundJobsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backgroundJobsDestroy(requestParameters: BackgroundJobsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.backgroundJobsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backgroundJobsListRaw(requestParameters: BackgroundJobsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedBackgroundJobList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBackgroundJobListFromJSON(jsonValue));
    }

    /**
     */
    async backgroundJobsList(requestParameters: BackgroundJobsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedBackgroundJobList> {
        const response = await this.backgroundJobsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async backgroundJobsPartialUpdateRaw(requestParameters: BackgroundJobsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BackgroundJob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling backgroundJobsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBackgroundJobToJSON(requestParameters.patchedBackgroundJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackgroundJobFromJSON(jsonValue));
    }

    /**
     */
    async backgroundJobsPartialUpdate(requestParameters: BackgroundJobsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BackgroundJob> {
        const response = await this.backgroundJobsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async backgroundJobsRetrieveRaw(requestParameters: BackgroundJobsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BackgroundJob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling backgroundJobsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackgroundJobFromJSON(jsonValue));
    }

    /**
     */
    async backgroundJobsRetrieve(requestParameters: BackgroundJobsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BackgroundJob> {
        const response = await this.backgroundJobsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async backgroundJobsUpdateRaw(requestParameters: BackgroundJobsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BackgroundJob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling backgroundJobsUpdate.');
        }

        if (requestParameters.backgroundJob === null || requestParameters.backgroundJob === undefined) {
            throw new runtime.RequiredError('backgroundJob','Required parameter requestParameters.backgroundJob was null or undefined when calling backgroundJobsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/background_jobs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BackgroundJobToJSON(requestParameters.backgroundJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackgroundJobFromJSON(jsonValue));
    }

    /**
     */
    async backgroundJobsUpdate(requestParameters: BackgroundJobsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BackgroundJob> {
        const response = await this.backgroundJobsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
