/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContentReport,
    ContentReportFromJSON,
    ContentReportToJSON,
    PaginatedContentReportList,
    PaginatedContentReportListFromJSON,
    PaginatedContentReportListToJSON,
    PatchedContentReport,
    PatchedContentReportFromJSON,
    PatchedContentReportToJSON,
} from '../models';

export interface ContentReportsCreateRequest {
    contentReport?: ContentReport;
}

export interface ContentReportsDestroyRequest {
    id: number;
}

export interface ContentReportsListRequest {
    page?: number;
}

export interface ContentReportsPartialUpdateRequest {
    id: number;
    patchedContentReport?: PatchedContentReport;
}

export interface ContentReportsRetrieveRequest {
    id: number;
}

export interface ContentReportsUpdateRequest {
    id: number;
    contentReport?: ContentReport;
}

/**
 * 
 */
export class ContentReportsApi extends runtime.BaseAPI {

    /**
     */
    async contentReportsCreateRaw(requestParameters: ContentReportsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContentReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentReportToJSON(requestParameters.contentReport),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentReportFromJSON(jsonValue));
    }

    /**
     */
    async contentReportsCreate(requestParameters: ContentReportsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContentReport> {
        const response = await this.contentReportsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contentReportsDestroyRaw(requestParameters: ContentReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contentReportsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contentReportsDestroy(requestParameters: ContentReportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.contentReportsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contentReportsListRaw(requestParameters: ContentReportsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedContentReportList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContentReportListFromJSON(jsonValue));
    }

    /**
     */
    async contentReportsList(requestParameters: ContentReportsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedContentReportList> {
        const response = await this.contentReportsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contentReportsPartialUpdateRaw(requestParameters: ContentReportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContentReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contentReportsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContentReportToJSON(requestParameters.patchedContentReport),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentReportFromJSON(jsonValue));
    }

    /**
     */
    async contentReportsPartialUpdate(requestParameters: ContentReportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContentReport> {
        const response = await this.contentReportsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contentReportsRetrieveRaw(requestParameters: ContentReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContentReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contentReportsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentReportFromJSON(jsonValue));
    }

    /**
     */
    async contentReportsRetrieve(requestParameters: ContentReportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContentReport> {
        const response = await this.contentReportsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contentReportsUpdateRaw(requestParameters: ContentReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ContentReport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contentReportsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/content_reports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentReportToJSON(requestParameters.contentReport),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentReportFromJSON(jsonValue));
    }

    /**
     */
    async contentReportsUpdate(requestParameters: ContentReportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ContentReport> {
        const response = await this.contentReportsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
