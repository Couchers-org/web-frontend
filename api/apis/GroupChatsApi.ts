/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GroupChat,
    GroupChatFromJSON,
    GroupChatToJSON,
    PaginatedGroupChatList,
    PaginatedGroupChatListFromJSON,
    PaginatedGroupChatListToJSON,
    PatchedGroupChat,
    PatchedGroupChatFromJSON,
    PatchedGroupChatToJSON,
} from '../models';

export interface GroupChatsCreateRequest {
    groupChat: GroupChat;
}

export interface GroupChatsDestroyRequest {
    id: number;
}

export interface GroupChatsListRequest {
    page?: number;
}

export interface GroupChatsPartialUpdateRequest {
    id: number;
    patchedGroupChat?: PatchedGroupChat;
}

export interface GroupChatsRetrieveRequest {
    id: number;
}

export interface GroupChatsUpdateRequest {
    id: number;
    groupChat: GroupChat;
}

/**
 * 
 */
export class GroupChatsApi extends runtime.BaseAPI {

    /**
     */
    async groupChatsCreateRaw(requestParameters: GroupChatsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChat>> {
        if (requestParameters.groupChat === null || requestParameters.groupChat === undefined) {
            throw new runtime.RequiredError('groupChat','Required parameter requestParameters.groupChat was null or undefined when calling groupChatsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupChatToJSON(requestParameters.groupChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatFromJSON(jsonValue));
    }

    /**
     */
    async groupChatsCreate(requestParameters: GroupChatsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChat> {
        const response = await this.groupChatsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatsDestroyRaw(requestParameters: GroupChatsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupChatsDestroy(requestParameters: GroupChatsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.groupChatsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupChatsListRaw(requestParameters: GroupChatsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedGroupChatList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupChatListFromJSON(jsonValue));
    }

    /**
     */
    async groupChatsList(requestParameters: GroupChatsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedGroupChatList> {
        const response = await this.groupChatsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatsPartialUpdateRaw(requestParameters: GroupChatsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGroupChatToJSON(requestParameters.patchedGroupChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatFromJSON(jsonValue));
    }

    /**
     */
    async groupChatsPartialUpdate(requestParameters: GroupChatsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChat> {
        const response = await this.groupChatsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatsRetrieveRaw(requestParameters: GroupChatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatFromJSON(jsonValue));
    }

    /**
     */
    async groupChatsRetrieve(requestParameters: GroupChatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChat> {
        const response = await this.groupChatsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatsUpdateRaw(requestParameters: GroupChatsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatsUpdate.');
        }

        if (requestParameters.groupChat === null || requestParameters.groupChat === undefined) {
            throw new runtime.RequiredError('groupChat','Required parameter requestParameters.groupChat was null or undefined when calling groupChatsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupChatToJSON(requestParameters.groupChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatFromJSON(jsonValue));
    }

    /**
     */
    async groupChatsUpdate(requestParameters: GroupChatsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChat> {
        const response = await this.groupChatsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
