/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OneTimeDonation,
    OneTimeDonationFromJSON,
    OneTimeDonationToJSON,
    PaginatedOneTimeDonationList,
    PaginatedOneTimeDonationListFromJSON,
    PaginatedOneTimeDonationListToJSON,
    PatchedOneTimeDonation,
    PatchedOneTimeDonationFromJSON,
    PatchedOneTimeDonationToJSON,
} from '../models';

export interface OneTimeDonationsCreateRequest {
    oneTimeDonation: OneTimeDonation;
}

export interface OneTimeDonationsDestroyRequest {
    id: number;
}

export interface OneTimeDonationsListRequest {
    page?: number;
}

export interface OneTimeDonationsPartialUpdateRequest {
    id: number;
    patchedOneTimeDonation?: PatchedOneTimeDonation;
}

export interface OneTimeDonationsRetrieveRequest {
    id: number;
}

export interface OneTimeDonationsUpdateRequest {
    id: number;
    oneTimeDonation: OneTimeDonation;
}

/**
 * 
 */
export class OneTimeDonationsApi extends runtime.BaseAPI {

    /**
     */
    async oneTimeDonationsCreateRaw(requestParameters: OneTimeDonationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OneTimeDonation>> {
        if (requestParameters.oneTimeDonation === null || requestParameters.oneTimeDonation === undefined) {
            throw new runtime.RequiredError('oneTimeDonation','Required parameter requestParameters.oneTimeDonation was null or undefined when calling oneTimeDonationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OneTimeDonationToJSON(requestParameters.oneTimeDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeDonationFromJSON(jsonValue));
    }

    /**
     */
    async oneTimeDonationsCreate(requestParameters: OneTimeDonationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OneTimeDonation> {
        const response = await this.oneTimeDonationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oneTimeDonationsDestroyRaw(requestParameters: OneTimeDonationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oneTimeDonationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oneTimeDonationsDestroy(requestParameters: OneTimeDonationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.oneTimeDonationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async oneTimeDonationsListRaw(requestParameters: OneTimeDonationsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedOneTimeDonationList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOneTimeDonationListFromJSON(jsonValue));
    }

    /**
     */
    async oneTimeDonationsList(requestParameters: OneTimeDonationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedOneTimeDonationList> {
        const response = await this.oneTimeDonationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oneTimeDonationsPartialUpdateRaw(requestParameters: OneTimeDonationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OneTimeDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oneTimeDonationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedOneTimeDonationToJSON(requestParameters.patchedOneTimeDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeDonationFromJSON(jsonValue));
    }

    /**
     */
    async oneTimeDonationsPartialUpdate(requestParameters: OneTimeDonationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OneTimeDonation> {
        const response = await this.oneTimeDonationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oneTimeDonationsRetrieveRaw(requestParameters: OneTimeDonationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OneTimeDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oneTimeDonationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeDonationFromJSON(jsonValue));
    }

    /**
     */
    async oneTimeDonationsRetrieve(requestParameters: OneTimeDonationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OneTimeDonation> {
        const response = await this.oneTimeDonationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oneTimeDonationsUpdateRaw(requestParameters: OneTimeDonationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OneTimeDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oneTimeDonationsUpdate.');
        }

        if (requestParameters.oneTimeDonation === null || requestParameters.oneTimeDonation === undefined) {
            throw new runtime.RequiredError('oneTimeDonation','Required parameter requestParameters.oneTimeDonation was null or undefined when calling oneTimeDonationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/one_time_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OneTimeDonationToJSON(requestParameters.oneTimeDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeDonationFromJSON(jsonValue));
    }

    /**
     */
    async oneTimeDonationsUpdate(requestParameters: OneTimeDonationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OneTimeDonation> {
        const response = await this.oneTimeDonationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
