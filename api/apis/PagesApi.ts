/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Page,
    PageFromJSON,
    PageToJSON,
    PaginatedPageList,
    PaginatedPageListFromJSON,
    PaginatedPageListToJSON,
    PatchedPage,
    PatchedPageFromJSON,
    PatchedPageToJSON,
} from '../models';

export interface PagesCreateRequest {
    page: Page;
}

export interface PagesDestroyRequest {
    id: number;
}

export interface PagesListRequest {
    page?: number;
}

export interface PagesPartialUpdateRequest {
    id: number;
    patchedPage?: PatchedPage;
}

export interface PagesRetrieveRequest {
    id: number;
}

export interface PagesUpdateRequest {
    id: number;
    page: Page;
}

/**
 * 
 */
export class PagesApi extends runtime.BaseAPI {

    /**
     */
    async pagesCreateRaw(requestParameters: PagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling pagesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PageToJSON(requestParameters.page),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async pagesCreate(requestParameters: PagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Page> {
        const response = await this.pagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pagesDestroyRaw(requestParameters: PagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pagesDestroy(requestParameters: PagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.pagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pagesListRaw(requestParameters: PagesListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedPageList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPageListFromJSON(jsonValue));
    }

    /**
     */
    async pagesList(requestParameters: PagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedPageList> {
        const response = await this.pagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pagesPartialUpdateRaw(requestParameters: PagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPageToJSON(requestParameters.patchedPage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async pagesPartialUpdate(requestParameters: PagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Page> {
        const response = await this.pagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pagesRetrieveRaw(requestParameters: PagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async pagesRetrieve(requestParameters: PagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Page> {
        const response = await this.pagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pagesUpdateRaw(requestParameters: PagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pagesUpdate.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling pagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/pages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PageToJSON(requestParameters.page),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async pagesUpdate(requestParameters: PagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Page> {
        const response = await this.pagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
