/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Cluster,
    ClusterFromJSON,
    ClusterToJSON,
    PaginatedClusterList,
    PaginatedClusterListFromJSON,
    PaginatedClusterListToJSON,
    PatchedCluster,
    PatchedClusterFromJSON,
    PatchedClusterToJSON,
} from '../models';

export interface ClustersCreateRequest {
    cluster: Cluster;
}

export interface ClustersDestroyRequest {
    id: number;
}

export interface ClustersListRequest {
    page?: number;
}

export interface ClustersPartialUpdateRequest {
    id: number;
    patchedCluster?: PatchedCluster;
}

export interface ClustersRetrieveRequest {
    id: number;
}

export interface ClustersUpdateRequest {
    id: number;
    cluster: Cluster;
}

/**
 * 
 */
export class ClustersApi extends runtime.BaseAPI {

    /**
     */
    async clustersCreateRaw(requestParameters: ClustersCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling clustersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterToJSON(requestParameters.cluster),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async clustersCreate(requestParameters: ClustersCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Cluster> {
        const response = await this.clustersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clustersDestroyRaw(requestParameters: ClustersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clustersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clustersDestroy(requestParameters: ClustersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.clustersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clustersListRaw(requestParameters: ClustersListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedClusterList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedClusterListFromJSON(jsonValue));
    }

    /**
     */
    async clustersList(requestParameters: ClustersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedClusterList> {
        const response = await this.clustersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clustersPartialUpdateRaw(requestParameters: ClustersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clustersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedClusterToJSON(requestParameters.patchedCluster),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async clustersPartialUpdate(requestParameters: ClustersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Cluster> {
        const response = await this.clustersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clustersRetrieveRaw(requestParameters: ClustersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clustersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async clustersRetrieve(requestParameters: ClustersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Cluster> {
        const response = await this.clustersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clustersUpdateRaw(requestParameters: ClustersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clustersUpdate.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling clustersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/clusters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterToJSON(requestParameters.cluster),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async clustersUpdate(requestParameters: ClustersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Cluster> {
        const response = await this.clustersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
