/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClusterSubscription,
    ClusterSubscriptionFromJSON,
    ClusterSubscriptionToJSON,
    PaginatedClusterSubscriptionList,
    PaginatedClusterSubscriptionListFromJSON,
    PaginatedClusterSubscriptionListToJSON,
    PatchedClusterSubscription,
    PatchedClusterSubscriptionFromJSON,
    PatchedClusterSubscriptionToJSON,
} from '../models';

export interface ClusterSubscriptionsCreateRequest {
    clusterSubscription: ClusterSubscription;
}

export interface ClusterSubscriptionsDestroyRequest {
    id: number;
}

export interface ClusterSubscriptionsListRequest {
    page?: number;
}

export interface ClusterSubscriptionsPartialUpdateRequest {
    id: number;
    patchedClusterSubscription?: PatchedClusterSubscription;
}

export interface ClusterSubscriptionsRetrieveRequest {
    id: number;
}

export interface ClusterSubscriptionsUpdateRequest {
    id: number;
    clusterSubscription: ClusterSubscription;
}

/**
 * 
 */
export class ClusterSubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async clusterSubscriptionsCreateRaw(requestParameters: ClusterSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterSubscription>> {
        if (requestParameters.clusterSubscription === null || requestParameters.clusterSubscription === undefined) {
            throw new runtime.RequiredError('clusterSubscription','Required parameter requestParameters.clusterSubscription was null or undefined when calling clusterSubscriptionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterSubscriptionToJSON(requestParameters.clusterSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async clusterSubscriptionsCreate(requestParameters: ClusterSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterSubscription> {
        const response = await this.clusterSubscriptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterSubscriptionsDestroyRaw(requestParameters: ClusterSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterSubscriptionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterSubscriptionsDestroy(requestParameters: ClusterSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.clusterSubscriptionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterSubscriptionsListRaw(requestParameters: ClusterSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedClusterSubscriptionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedClusterSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async clusterSubscriptionsList(requestParameters: ClusterSubscriptionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedClusterSubscriptionList> {
        const response = await this.clusterSubscriptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterSubscriptionsPartialUpdateRaw(requestParameters: ClusterSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterSubscriptionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedClusterSubscriptionToJSON(requestParameters.patchedClusterSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async clusterSubscriptionsPartialUpdate(requestParameters: ClusterSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterSubscription> {
        const response = await this.clusterSubscriptionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterSubscriptionsRetrieveRaw(requestParameters: ClusterSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterSubscriptionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async clusterSubscriptionsRetrieve(requestParameters: ClusterSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterSubscription> {
        const response = await this.clusterSubscriptionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterSubscriptionsUpdateRaw(requestParameters: ClusterSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ClusterSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clusterSubscriptionsUpdate.');
        }

        if (requestParameters.clusterSubscription === null || requestParameters.clusterSubscription === undefined) {
            throw new runtime.RequiredError('clusterSubscription','Required parameter requestParameters.clusterSubscription was null or undefined when calling clusterSubscriptionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/cluster_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterSubscriptionToJSON(requestParameters.clusterSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async clusterSubscriptionsUpdate(requestParameters: ClusterSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ClusterSubscription> {
        const response = await this.clusterSubscriptionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
