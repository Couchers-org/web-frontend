/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountDeletionToken,
    AccountDeletionTokenFromJSON,
    AccountDeletionTokenToJSON,
    PaginatedAccountDeletionTokenList,
    PaginatedAccountDeletionTokenListFromJSON,
    PaginatedAccountDeletionTokenListToJSON,
    PatchedAccountDeletionToken,
    PatchedAccountDeletionTokenFromJSON,
    PatchedAccountDeletionTokenToJSON,
} from '../models';

export interface AccountDeletionTokensCreateRequest {
    accountDeletionToken: AccountDeletionToken;
}

export interface AccountDeletionTokensDestroyRequest {
    id: number;
}

export interface AccountDeletionTokensListRequest {
    page?: number;
}

export interface AccountDeletionTokensPartialUpdateRequest {
    id: number;
    patchedAccountDeletionToken?: PatchedAccountDeletionToken;
}

export interface AccountDeletionTokensRetrieveRequest {
    id: number;
}

export interface AccountDeletionTokensUpdateRequest {
    id: number;
    accountDeletionToken: AccountDeletionToken;
}

/**
 * 
 */
export class AccountDeletionTokensApi extends runtime.BaseAPI {

    /**
     */
    async accountDeletionTokensCreateRaw(requestParameters: AccountDeletionTokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionToken>> {
        if (requestParameters.accountDeletionToken === null || requestParameters.accountDeletionToken === undefined) {
            throw new runtime.RequiredError('accountDeletionToken','Required parameter requestParameters.accountDeletionToken was null or undefined when calling accountDeletionTokensCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountDeletionTokenToJSON(requestParameters.accountDeletionToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionTokenFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionTokensCreate(requestParameters: AccountDeletionTokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionToken> {
        const response = await this.accountDeletionTokensCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionTokensDestroyRaw(requestParameters: AccountDeletionTokensDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionTokensDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountDeletionTokensDestroy(requestParameters: AccountDeletionTokensDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.accountDeletionTokensDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountDeletionTokensListRaw(requestParameters: AccountDeletionTokensListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedAccountDeletionTokenList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccountDeletionTokenListFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionTokensList(requestParameters: AccountDeletionTokensListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedAccountDeletionTokenList> {
        const response = await this.accountDeletionTokensListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionTokensPartialUpdateRaw(requestParameters: AccountDeletionTokensPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionTokensPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAccountDeletionTokenToJSON(requestParameters.patchedAccountDeletionToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionTokenFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionTokensPartialUpdate(requestParameters: AccountDeletionTokensPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionToken> {
        const response = await this.accountDeletionTokensPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionTokensRetrieveRaw(requestParameters: AccountDeletionTokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionTokensRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionTokenFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionTokensRetrieve(requestParameters: AccountDeletionTokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionToken> {
        const response = await this.accountDeletionTokensRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionTokensUpdateRaw(requestParameters: AccountDeletionTokensUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionTokensUpdate.');
        }

        if (requestParameters.accountDeletionToken === null || requestParameters.accountDeletionToken === undefined) {
            throw new runtime.RequiredError('accountDeletionToken','Required parameter requestParameters.accountDeletionToken was null or undefined when calling accountDeletionTokensUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_tokens/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountDeletionTokenToJSON(requestParameters.accountDeletionToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionTokenFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionTokensUpdate(requestParameters: AccountDeletionTokensUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionToken> {
        const response = await this.accountDeletionTokensUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
