/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedRecurringDonationList,
    PaginatedRecurringDonationListFromJSON,
    PaginatedRecurringDonationListToJSON,
    PatchedRecurringDonation,
    PatchedRecurringDonationFromJSON,
    PatchedRecurringDonationToJSON,
    RecurringDonation,
    RecurringDonationFromJSON,
    RecurringDonationToJSON,
} from '../models';

export interface RecurringDonationsCreateRequest {
    recurringDonation: RecurringDonation;
}

export interface RecurringDonationsDestroyRequest {
    id: number;
}

export interface RecurringDonationsListRequest {
    page?: number;
}

export interface RecurringDonationsPartialUpdateRequest {
    id: number;
    patchedRecurringDonation?: PatchedRecurringDonation;
}

export interface RecurringDonationsRetrieveRequest {
    id: number;
}

export interface RecurringDonationsUpdateRequest {
    id: number;
    recurringDonation: RecurringDonation;
}

/**
 * 
 */
export class RecurringDonationsApi extends runtime.BaseAPI {

    /**
     */
    async recurringDonationsCreateRaw(requestParameters: RecurringDonationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RecurringDonation>> {
        if (requestParameters.recurringDonation === null || requestParameters.recurringDonation === undefined) {
            throw new runtime.RequiredError('recurringDonation','Required parameter requestParameters.recurringDonation was null or undefined when calling recurringDonationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringDonationToJSON(requestParameters.recurringDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringDonationFromJSON(jsonValue));
    }

    /**
     */
    async recurringDonationsCreate(requestParameters: RecurringDonationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RecurringDonation> {
        const response = await this.recurringDonationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recurringDonationsDestroyRaw(requestParameters: RecurringDonationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recurringDonationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async recurringDonationsDestroy(requestParameters: RecurringDonationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.recurringDonationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async recurringDonationsListRaw(requestParameters: RecurringDonationsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedRecurringDonationList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRecurringDonationListFromJSON(jsonValue));
    }

    /**
     */
    async recurringDonationsList(requestParameters: RecurringDonationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedRecurringDonationList> {
        const response = await this.recurringDonationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recurringDonationsPartialUpdateRaw(requestParameters: RecurringDonationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RecurringDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recurringDonationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRecurringDonationToJSON(requestParameters.patchedRecurringDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringDonationFromJSON(jsonValue));
    }

    /**
     */
    async recurringDonationsPartialUpdate(requestParameters: RecurringDonationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RecurringDonation> {
        const response = await this.recurringDonationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recurringDonationsRetrieveRaw(requestParameters: RecurringDonationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RecurringDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recurringDonationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringDonationFromJSON(jsonValue));
    }

    /**
     */
    async recurringDonationsRetrieve(requestParameters: RecurringDonationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RecurringDonation> {
        const response = await this.recurringDonationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recurringDonationsUpdateRaw(requestParameters: RecurringDonationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RecurringDonation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recurringDonationsUpdate.');
        }

        if (requestParameters.recurringDonation === null || requestParameters.recurringDonation === undefined) {
            throw new runtime.RequiredError('recurringDonation','Required parameter requestParameters.recurringDonation was null or undefined when calling recurringDonationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/recurring_donations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringDonationToJSON(requestParameters.recurringDonation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringDonationFromJSON(jsonValue));
    }

    /**
     */
    async recurringDonationsUpdate(requestParameters: RecurringDonationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RecurringDonation> {
        const response = await this.recurringDonationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
