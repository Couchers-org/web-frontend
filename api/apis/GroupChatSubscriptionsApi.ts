/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GroupChatSubscription,
    GroupChatSubscriptionFromJSON,
    GroupChatSubscriptionToJSON,
    PaginatedGroupChatSubscriptionList,
    PaginatedGroupChatSubscriptionListFromJSON,
    PaginatedGroupChatSubscriptionListToJSON,
    PatchedGroupChatSubscription,
    PatchedGroupChatSubscriptionFromJSON,
    PatchedGroupChatSubscriptionToJSON,
} from '../models';

export interface GroupChatSubscriptionsCreateRequest {
    groupChatSubscription: GroupChatSubscription;
}

export interface GroupChatSubscriptionsDestroyRequest {
    id: number;
}

export interface GroupChatSubscriptionsListRequest {
    page?: number;
}

export interface GroupChatSubscriptionsPartialUpdateRequest {
    id: number;
    patchedGroupChatSubscription?: PatchedGroupChatSubscription;
}

export interface GroupChatSubscriptionsRetrieveRequest {
    id: number;
}

export interface GroupChatSubscriptionsUpdateRequest {
    id: number;
    groupChatSubscription: GroupChatSubscription;
}

/**
 * 
 */
export class GroupChatSubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async groupChatSubscriptionsCreateRaw(requestParameters: GroupChatSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChatSubscription>> {
        if (requestParameters.groupChatSubscription === null || requestParameters.groupChatSubscription === undefined) {
            throw new runtime.RequiredError('groupChatSubscription','Required parameter requestParameters.groupChatSubscription was null or undefined when calling groupChatSubscriptionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupChatSubscriptionToJSON(requestParameters.groupChatSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async groupChatSubscriptionsCreate(requestParameters: GroupChatSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChatSubscription> {
        const response = await this.groupChatSubscriptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatSubscriptionsDestroyRaw(requestParameters: GroupChatSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatSubscriptionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupChatSubscriptionsDestroy(requestParameters: GroupChatSubscriptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.groupChatSubscriptionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupChatSubscriptionsListRaw(requestParameters: GroupChatSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedGroupChatSubscriptionList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupChatSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async groupChatSubscriptionsList(requestParameters: GroupChatSubscriptionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedGroupChatSubscriptionList> {
        const response = await this.groupChatSubscriptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatSubscriptionsPartialUpdateRaw(requestParameters: GroupChatSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChatSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatSubscriptionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGroupChatSubscriptionToJSON(requestParameters.patchedGroupChatSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async groupChatSubscriptionsPartialUpdate(requestParameters: GroupChatSubscriptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChatSubscription> {
        const response = await this.groupChatSubscriptionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatSubscriptionsRetrieveRaw(requestParameters: GroupChatSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChatSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatSubscriptionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async groupChatSubscriptionsRetrieve(requestParameters: GroupChatSubscriptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChatSubscription> {
        const response = await this.groupChatSubscriptionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupChatSubscriptionsUpdateRaw(requestParameters: GroupChatSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GroupChatSubscription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupChatSubscriptionsUpdate.');
        }

        if (requestParameters.groupChatSubscription === null || requestParameters.groupChatSubscription === undefined) {
            throw new runtime.RequiredError('groupChatSubscription','Required parameter requestParameters.groupChatSubscription was null or undefined when calling groupChatSubscriptionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/group_chat_subscriptions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupChatSubscriptionToJSON(requestParameters.groupChatSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupChatSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async groupChatSubscriptionsUpdate(requestParameters: GroupChatSubscriptionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GroupChatSubscription> {
        const response = await this.groupChatSubscriptionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
