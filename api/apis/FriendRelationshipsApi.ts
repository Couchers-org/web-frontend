/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FriendRelationship,
    FriendRelationshipFromJSON,
    FriendRelationshipToJSON,
    PaginatedFriendRelationshipList,
    PaginatedFriendRelationshipListFromJSON,
    PaginatedFriendRelationshipListToJSON,
    PatchedFriendRelationship,
    PatchedFriendRelationshipFromJSON,
    PatchedFriendRelationshipToJSON,
} from '../models';

export interface FriendRelationshipsCreateRequest {
    friendRelationship: FriendRelationship;
}

export interface FriendRelationshipsDestroyRequest {
    id: number;
}

export interface FriendRelationshipsListRequest {
    page?: number;
}

export interface FriendRelationshipsPartialUpdateRequest {
    id: number;
    patchedFriendRelationship?: PatchedFriendRelationship;
}

export interface FriendRelationshipsRetrieveRequest {
    id: number;
}

export interface FriendRelationshipsUpdateRequest {
    id: number;
    friendRelationship: FriendRelationship;
}

/**
 * 
 */
export class FriendRelationshipsApi extends runtime.BaseAPI {

    /**
     */
    async friendRelationshipsCreateRaw(requestParameters: FriendRelationshipsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FriendRelationship>> {
        if (requestParameters.friendRelationship === null || requestParameters.friendRelationship === undefined) {
            throw new runtime.RequiredError('friendRelationship','Required parameter requestParameters.friendRelationship was null or undefined when calling friendRelationshipsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FriendRelationshipToJSON(requestParameters.friendRelationship),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FriendRelationshipFromJSON(jsonValue));
    }

    /**
     */
    async friendRelationshipsCreate(requestParameters: FriendRelationshipsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FriendRelationship> {
        const response = await this.friendRelationshipsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async friendRelationshipsDestroyRaw(requestParameters: FriendRelationshipsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling friendRelationshipsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async friendRelationshipsDestroy(requestParameters: FriendRelationshipsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.friendRelationshipsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async friendRelationshipsListRaw(requestParameters: FriendRelationshipsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedFriendRelationshipList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFriendRelationshipListFromJSON(jsonValue));
    }

    /**
     */
    async friendRelationshipsList(requestParameters: FriendRelationshipsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedFriendRelationshipList> {
        const response = await this.friendRelationshipsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async friendRelationshipsPartialUpdateRaw(requestParameters: FriendRelationshipsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FriendRelationship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling friendRelationshipsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFriendRelationshipToJSON(requestParameters.patchedFriendRelationship),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FriendRelationshipFromJSON(jsonValue));
    }

    /**
     */
    async friendRelationshipsPartialUpdate(requestParameters: FriendRelationshipsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FriendRelationship> {
        const response = await this.friendRelationshipsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async friendRelationshipsRetrieveRaw(requestParameters: FriendRelationshipsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FriendRelationship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling friendRelationshipsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FriendRelationshipFromJSON(jsonValue));
    }

    /**
     */
    async friendRelationshipsRetrieve(requestParameters: FriendRelationshipsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FriendRelationship> {
        const response = await this.friendRelationshipsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async friendRelationshipsUpdateRaw(requestParameters: FriendRelationshipsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FriendRelationship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling friendRelationshipsUpdate.');
        }

        if (requestParameters.friendRelationship === null || requestParameters.friendRelationship === undefined) {
            throw new runtime.RequiredError('friendRelationship','Required parameter requestParameters.friendRelationship was null or undefined when calling friendRelationshipsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/friend_relationships/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FriendRelationshipToJSON(requestParameters.friendRelationship),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FriendRelationshipFromJSON(jsonValue));
    }

    /**
     */
    async friendRelationshipsUpdate(requestParameters: FriendRelationshipsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FriendRelationship> {
        const response = await this.friendRelationshipsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
