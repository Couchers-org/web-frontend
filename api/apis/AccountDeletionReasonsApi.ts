/* tslint:disable */
/* eslint-disable */
/**
 * Couchers API
 * Couchers API documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountDeletionReason,
    AccountDeletionReasonFromJSON,
    AccountDeletionReasonToJSON,
    PaginatedAccountDeletionReasonList,
    PaginatedAccountDeletionReasonListFromJSON,
    PaginatedAccountDeletionReasonListToJSON,
    PatchedAccountDeletionReason,
    PatchedAccountDeletionReasonFromJSON,
    PatchedAccountDeletionReasonToJSON,
} from '../models';

export interface AccountDeletionReasonsCreateRequest {
    accountDeletionReason?: AccountDeletionReason;
}

export interface AccountDeletionReasonsDestroyRequest {
    id: number;
}

export interface AccountDeletionReasonsListRequest {
    page?: number;
}

export interface AccountDeletionReasonsPartialUpdateRequest {
    id: number;
    patchedAccountDeletionReason?: PatchedAccountDeletionReason;
}

export interface AccountDeletionReasonsRetrieveRequest {
    id: number;
}

export interface AccountDeletionReasonsUpdateRequest {
    id: number;
    accountDeletionReason?: AccountDeletionReason;
}

/**
 * 
 */
export class AccountDeletionReasonsApi extends runtime.BaseAPI {

    /**
     */
    async accountDeletionReasonsCreateRaw(requestParameters: AccountDeletionReasonsCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionReason>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountDeletionReasonToJSON(requestParameters.accountDeletionReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionReasonFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionReasonsCreate(requestParameters: AccountDeletionReasonsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionReason> {
        const response = await this.accountDeletionReasonsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionReasonsDestroyRaw(requestParameters: AccountDeletionReasonsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionReasonsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountDeletionReasonsDestroy(requestParameters: AccountDeletionReasonsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.accountDeletionReasonsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountDeletionReasonsListRaw(requestParameters: AccountDeletionReasonsListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedAccountDeletionReasonList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccountDeletionReasonListFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionReasonsList(requestParameters: AccountDeletionReasonsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedAccountDeletionReasonList> {
        const response = await this.accountDeletionReasonsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionReasonsPartialUpdateRaw(requestParameters: AccountDeletionReasonsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionReason>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionReasonsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAccountDeletionReasonToJSON(requestParameters.patchedAccountDeletionReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionReasonFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionReasonsPartialUpdate(requestParameters: AccountDeletionReasonsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionReason> {
        const response = await this.accountDeletionReasonsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionReasonsRetrieveRaw(requestParameters: AccountDeletionReasonsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionReason>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionReasonsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionReasonFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionReasonsRetrieve(requestParameters: AccountDeletionReasonsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionReason> {
        const response = await this.accountDeletionReasonsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountDeletionReasonsUpdateRaw(requestParameters: AccountDeletionReasonsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountDeletionReason>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeletionReasonsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/account_deletion_reasons/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountDeletionReasonToJSON(requestParameters.accountDeletionReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeletionReasonFromJSON(jsonValue));
    }

    /**
     */
    async accountDeletionReasonsUpdate(requestParameters: AccountDeletionReasonsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountDeletionReason> {
        const response = await this.accountDeletionReasonsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
